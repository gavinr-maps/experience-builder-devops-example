"use strict";(self.webpackChunkexb_client=self.webpackChunkexb_client||[]).push([[84417],{84417:(e,t,o)=>{o.r(t),o.d(t,{default:()=>F});var r=o(36663),i=o(51366),s=o(66341),l=(o(4905),o(15842)),n=o(78668),a=o(3466),y=o(81977),p=(o(7283),o(7753),o(39994),o(34248)),u=o(40266),d=o(91772),h=o(35925),c=o(38481),S=o(27668),b=o(43330),m=o(18241),v=o(12478),f=o(95874),g=o(51599),C=o(18251),_=o(15498),k=o(86036),G=o(1759),w=o(43411);const x=["atom","xml"],R={base:C.Z,key:"type",typeMap:{"simple-line":_.Z},errorContext:"symbol"},Z={base:C.Z,key:"type",typeMap:{"picture-marker":k.Z,"simple-marker":G.Z},errorContext:"symbol"},P={base:C.Z,key:"type",typeMap:{"simple-fill":w.Z},errorContext:"symbol"};let j=class extends((0,S.h)((0,v.Q)((0,b.q)((0,m.I)((0,f.M)((0,l.R)(c.Z))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{const t=e.layerDefinition.drawingInfo.renderer.symbol;t&&"esriSFS"===t.type&&t.outline?.style.includes("esriSFS")&&(t.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?(0,a.vt)(this.url,x)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(n.r9).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){const t=this.spatialReference,{data:o}=await(0,s.default)(i.Z.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:(0,h.oR)(t)?void 0:t.wkid??JSON.stringify(t)},signal:e});return o}_hasGeometry(e){return this.featureCollections?.some((t=>t.featureSet?.geometryType===e&&t.featureSet.features?.length>0))??!1}};(0,r._)([(0,y.Cb)()],j.prototype,"description",void 0),(0,r._)([(0,y.Cb)()],j.prototype,"featureCollections",void 0),(0,r._)([(0,p.r)("service","featureCollections",["featureCollection.layers"])],j.prototype,"readFeatureCollections",null),(0,r._)([(0,y.Cb)({type:d.Z,json:{name:"lookAtExtent"}})],j.prototype,"fullExtent",void 0),(0,r._)([(0,y.Cb)(g.id)],j.prototype,"id",void 0),(0,r._)([(0,y.Cb)(g.rn)],j.prototype,"legendEnabled",void 0),(0,r._)([(0,y.Cb)({types:R,json:{write:!0}})],j.prototype,"lineSymbol",void 0),(0,r._)([(0,y.Cb)({type:["show","hide"]})],j.prototype,"listMode",void 0),(0,r._)([(0,y.Cb)({types:Z,json:{write:!0}})],j.prototype,"pointSymbol",void 0),(0,r._)([(0,y.Cb)({types:P,json:{write:!0}})],j.prototype,"polygonSymbol",void 0),(0,r._)([(0,y.Cb)({type:["GeoRSS"]})],j.prototype,"operationalLayerType",void 0),(0,r._)([(0,y.Cb)(g.HQ)],j.prototype,"url",void 0),(0,r._)([(0,y.Cb)({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],j.prototype,"title",null),(0,r._)([(0,y.Cb)({readOnly:!0,json:{read:!1},value:"geo-rss"})],j.prototype,"type",void 0),j=(0,r._)([(0,u.j)("esri.layers.GeoRSSLayer")],j);const F=j}}]);