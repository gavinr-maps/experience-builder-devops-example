"use strict";(self.webpackChunkexb_client=self.webpackChunkexb_client||[]).push([[50455],{25015:(e,t,i)=>{var n;i.d(t,{Y:()=>n}),function(e){e[e.KILOBYTES=1024]="KILOBYTES",e[e.MEGABYTES=1048576]="MEGABYTES",e[e.GIGABYTES=1073741824]="GIGABYTES"}(n||(n={}))},50455:(e,t,i)=>{i.r(t),i.d(t,{default:()=>rt});var n=i(36663),r=i(80020),s=i(70375),a=i(13802),o=i(15842),l=i(78668),c=i(76868),h=i(81977),u=i(7283),f=i(7753),d=i(39994),m=i(79438),p=i(40266),y=i(38481),g=i(87232),x=i(27668),w=i(63989),b=(i(91957),i(98549)),I=i(66341),v=i(34248),_=i(35925),S=i(20692),R=i(51599),T=i(59510),C=i(51130),k=i(24593),M=i(29410),F=i(81590),P=i(82064),O=i(61681),D=i(64189),B=i(13054),z=i(20613),A=i(76386),E=i(45389),J=i(79956),Z=i(11931),N=i(31329),H=i(18486),L=i(7928),W=i(91772),q=i(67666);let G=class extends((0,D.v)(P.wq)){constructor(){super(...arguments),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=(0,H.zD)();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:F.Z.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=(0,H.ut)(e.spatialReference);return null!=t&&e.extent.width>=t/2}get _hasNoneOrGCSShiftTransform(){const{transform:e}=this.rasterInfo;return null==e||"gcs-shift"===e.type}set rasterJobHandler(e){this._set("rasterJobHandler",e),"Function"===this.datasetFormat&&this.primaryRasters?.rasters?.forEach((t=>t.rasterJobHandler=e))}set url(e){this._set("url",(0,S.Nm)(e,a.Z.getLogger(this)))}async open(e){throw new s.Z("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i,n={}){const r=n.tileInfo||this.rasterInfo.storageInfo.tileInfo,s=this.getTileExtentFromTileInfo(e,t,i,r);return this.fetchPixels(s,r.size[0],r.size[1],n)}async identify(e,t={}){e=(0,u.TJ)(q.Z,e).clone().normalize();const{multidimensionalDefinition:i,timeExtent:n}=t,{rasterInfo:r}=this,{hasMultidimensionalTranspose:s,multidimensionalInfo:a}=r;let{transposedVariableName:o}=t;const l=null!=a&&s&&(null!=n||(0,A.WU)(i));l&&!o&&(o=null!=i&&i.length>0?i[0].variableName??void 0:a.variables[0].name,t={...t,transposedVariableName:o}),t=this._getRequestOptionsWithSliceId(t);const{spatialReference:c,extent:h}=r,{datumTransformation:f}=t;let d=(0,H.nF)(e,c,f);if(!h.intersects(d))return{location:d,value:null};if(null!=r.transform){const e=r.transform.inverseTransform(d);if(!r.nativeExtent.intersects(e))return{location:e,value:null};d=e}let m=0;const p=null!=o&&null!=a&&r.hasMultidimensionalTranspose;if("Function"===this.datasetFormat){const e=this.primaryRasters.rasters[0];if(p)return e.identify(d,t);const{pixelSize:i}=r,n=3,s=i.x*n/2,a=i.y*n/2,o=new W.Z({xmin:d.x-s,xmax:d.x+s,ymin:d.y-a,ymax:d.y+a,spatialReference:c}),l={interpolation:"nearest"},{pixelBlock:h}=await e.fetchPixels(o,n,n,l),{pixelBlock:u}=await this.fetchPixels(o,n,n,l);if(null==h)return{location:d,value:null};const f=Math.floor(n*n*.5),m=!h.mask||h.mask[f]?h.pixels.map((e=>e[f])):null;let y;return null!=u&&(y=!u.mask||u.mask[f]?u.pixels.map((e=>e[f])):void 0),{location:d,value:m,processedValue:y,pyramidLevel:0}}if(!p)if(t.srcResolution)m=(0,H.kr)(t.srcResolution,r,this.ioConfig.sampling).pyramidLevel;else if(m=await this.computeBestPyramidLevelForLocation(e,t),null==m)return{location:d,value:null};const y=this.identifyPixelLocation(d,m,null,p);if(null===y)return{location:d,value:null};const{row:g,col:x,rowOffset:w,colOffset:b,blockWidth:I}=y,v=o??t.sliceId,_=(0,E.Rq)(this.url,v),S=`${m}/${g}/${x}`;let R=(0,E.Qg)(_,null,S);null==R&&(R=this.fetchRawTile(m,g,x,t),(0,E.gX)(_,null,S,R));const T=await R;if(null==T||!T.pixels?.length)return{location:d,value:null};const C=w*I+b;return this._processIdentifyResult(T,{srcLocation:d,position:C,pyramidLevel:m,useTransposedTile:!!p,requestSomeSlices:l,identifyOptions:t})}async fetchPixels(e,t,i,n={}){e=(0,H.kZ)(e),n=this._getRequestOptionsWithSliceId(n);const{_hasNoneOrGCSShiftTransform:r}=this;if(n.requestRawData&&r)return this._fetchPixels(e,t,i,n);const s=(0,H.ut)(e.spatialReference),a=(0,H.Hq)(e);if(null==s||0===a||1===a&&this._isGlobalWrappableSource&&r)return this._fetchPixels(e,t,i,n);if(a>=3)return{extent:e,pixelBlock:null};const o=[],{xmin:l,xmax:c}=e,h=Math.round(s/(c-l)*t),u=h-Math.round((s/2-l)/(c-l)*t);let f=0;const d=[];for(let r=0;r<=a;r++){const m=new W.Z({xmin:0===r?l:-s/2,xmax:r===a?c-s*r:s/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),p=0===r?h-u:r===a?t-f:h;f+=p,d.push(p);const y=n.disableWrapAround&&r>0?null:this._fetchPixels(m,p,i,n);o.push(y)}const m=(await Promise.all(o)).map((e=>e?.pixelBlock));let p=null;const y={width:t,height:i};return p=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:m,srcMosaicSize:y,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:d},n)).pixelBlock:(0,N.us)(m,y,{blockWidths:d}),{extent:e,srcExtent:(0,H.tB)(e,this.rasterInfo.spatialReference,n.datumTransformation),pixelBlock:p}}async fetchRawPixels(e,t,i,n={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const r=await this._fetchRawTiles(e,t,i,n),{nativeExtent:s,nativePixelSize:a,storageInfo:o}=this.rasterInfo,l=2**e,c=a.x*l,h=a.y*l,u=new W.Z({xmin:s.xmin+c*t.x,xmax:s.xmin+c*(t.x+i.width-1),ymin:s.ymax-h*(t.y+i.height-1),ymax:s.ymax-h*t.y,spatialReference:s.spatialReference});if(!r)return{extent:u,srcExtent:u,pixelBlock:null};const{pixelBlocks:f,mosaicSize:d}=r;if(1===f.length&&null!=f[0]&&f[0].width===i.width&&f[0].height===i.height)return{extent:u,srcExtent:u,pixelBlock:r.pixelBlocks[0]};const m=e>0?o.pyramidBlockWidth:o.blockWidth,p=e>0?o.pyramidBlockHeight:o.blockHeight,y={x:t.x%m,y:t.y%p};let g;return g=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:f,srcMosaicSize:d,destDimension:i,clipOffset:y,clipSize:i,coefs:null,sampleSpacing:null,interpolation:n.interpolation,alignmentInfo:null,blockWidths:null},n)).pixelBlock:(0,N.us)(f,d,{clipOffset:y,clipSize:i}),{extent:u,srcExtent:u,pixelBlock:g}}fetchRawTile(e,t,i,n){throw new s.Z("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return(0,H.tB)(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?(0,Z.J)(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,i=0){const{customFetchParameters:n}=this.ioConfig,{range:r,query:s,headers:a}=t;i=i??t.retryCount??this.ioConfig.retryCount;const o=r?{Range:`bytes=${r.from}-${r.to}`}:null;try{return await(0,I.default)(e,{...t,query:{...s,...n},headers:{...a,...o}})}catch(n){if(i>0)return i--,this.request(e,t,i);throw n}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return null==t||null==e||0===e.length?null:(0,A.gk)(e,t)}getTileExtentFromTileInfo(e,t,i,n){const r=(0,O.s3)(n.lodAt(e));return this.getTileExtent({x:r.resolution,y:r.resolution},t,i,n.origin,n.spatialReference,n.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:n}=this.rasterInfo;if(!e.tileInfo){const r=[],s=e.maximumPyramidLevel||0;let a=Math.max(n.x,n.y),o=1/.0254*96*a;for(let e=0;e<=s;e++)r.push(new B.Z({level:s-e,resolution:a,scale:o})),a*=2,o*=2;const l=new q.Z({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new F.Z({origin:l,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:r}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,n){const{width:r,height:s,nativeExtent:a,pixelSize:o,spatialReference:l}=e,c=new q.Z({x:a.xmin,y:a.ymax,spatialReference:l});null==n&&(n=Math.max(0,Math.round(Math.log(Math.max(r,s))/Math.LN2-8)));const h=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[o],n);e.storageInfo=new z.Z({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:n,blockBoundary:h})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,n,r,s=0,a=2){if(1===r.length&&s>0){r=[...r];let{x:e,y:t}=r[0];for(let i=0;i<s;i++)e*=a,t*=a,r.push({x:e,y:t})}const o=[],{x:l,y:c}=n;for(let n=0;n<r.length;n++){const{x:s,y:a}=r[n];o.push({minCol:Math.floor((e.xmin-l+.1*s)/t/s),maxCol:Math.floor((e.xmax-l-.1*s)/t/s),minRow:Math.floor((c-e.ymax+.1*a)/i/a),maxRow:Math.floor((c-e.ymin-.1*a)/i/a)})}return o}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:n}=this.rasterInfo.storageInfo;if(0===e)return t;if(null!=i&&i.length)return i[e-1];const r=n**e;return{x:t.x*r,y:t.y*r}}identifyPixelLocation(e,t,i,n){const{spatialReference:r,nativeExtent:s,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:o,origin:l,transposeInfo:c}=a,h=n&&null!=c?c.tileSize[0]:a.blockWidth,u=n&&null!=c?c.tileSize[1]:a.blockHeight,f=(0,H.nF)(e,r,i);if(!s.intersects(f))return null;if(t<0||t>o)return null;const d=this.getPyramidPixelSize(t),{x:m,y:p}=d,y=(l.y-f.y)/p/u,g=(f.x-l.x)/m/h,x=Math.min(u-1,Math.floor((y-Math.floor(y))*u)),w=Math.min(h-1,Math.floor((g-Math.floor(g))*h));return{pyramidLevel:t,row:Math.floor(y),col:Math.floor(g),rowOffset:x,colOffset:w,blockWidth:h,srcLocation:f}}getTileExtent(e,t,i,n,r,s){const[a,o]=s,l=n.x+i*a*e.x,c=l+a*e.x,h=n.y-t*o*e.y,u=h-o*e.y;return new W.Z({xmin:l,xmax:c,ymin:u,ymax:h,spatialReference:r})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const n=this.rasterInfo.storageInfo.blockBoundary[e];return!n||n.maxRow<t||n.maxCol<i||n.minRow>t||n.minCol>i}async _fetchPixels(e,t,i,n={}){let r=(0,H.Hq)(e);if(r>=2)return{extent:e,pixelBlock:null};const s=this._getSourceDataInfo(e,t,i,n),{pyramidLevel:a,srcResolution:o,srcExtent:l,srcWidth:c,srcHeight:h,ul:u}=s;if(0===c||0===h)return{extent:e,srcExtent:l,pixelBlock:null};const{rasterInfo:f}=this,d=f.transform,m="gcs-shift"===d?.type,p=null!=(0,H.ut)(e.spatialReference);!m&&p||(r=(0,H.Hq)(s.srcExtent,m));const y=await this._fetchRawTiles(a,u,{width:c,height:h,wrapCount:r},n);if(!y)return{extent:e,srcExtent:l,pixelBlock:null};const g=f.storageInfo,x=a>0?g.pyramidBlockWidth:g.blockWidth,w=a>0?g.pyramidBlockHeight:g.blockHeight;let{x:b,y:I}=f.pixelSize;if(a>0){const{pyramidResolutions:e,pyramidScalingFactor:t}=g;if(null!=e&&e[a-1])({x:b,y:I}=e[a-1]);else{const e=t**a;b*=e,I*=e}}const v=f.spatialReference,_=new q.Z({x:b,y:I,spatialReference:v}),S=x===c&&w===h&&u.x%x==0&&u.y%w==0,R=new q.Z({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),T=!e.spatialReference.equals(v),C=v.isGeographic?1e-9:1e-4,{datumTransformation:k}=n;if(!T&&S&&1===y.pixelBlocks.length&&x===t&&w===i&&this._isSameResolution(o,R,C))return{extent:e,srcExtent:l,srcTilePixelSize:_,pixelBlock:y.pixelBlocks[0]};const M=p&&null!=(0,H.ut)(l.spatialReference)&&this._hasNoneOrGCSShiftTransform,F=n.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");F&&!this.rasterJobHandler&&await(0,H.zD)();const P=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:y.extent,pixelSize:R.toJSON(),datumTransformation:k,rasterTransform:d,hasWrapAround:r>0||M,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:F},n):(0,H.Qp)({projectedExtent:e,srcBufferExtent:y.extent,pixelSize:R,datumTransformation:k,rasterTransform:d,hasWrapAround:r>0||M,isAdaptive:!1,includeGCSGrid:F});let O;const D=!n.requestRawData,B={rows:P.spacing[0],cols:P.spacing[1]},z=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(a,y.extent.xmin):void 0,{pixelBlocks:A,mosaicSize:E,isPartiallyFilled:J}=y;let Z=null;if(this.rasterJobHandler){const e=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:A,srcMosaicSize:E,destDimension:D?{width:t,height:i}:null,coefs:D?P.coefficients:null,sampleSpacing:D?B:null,projectDirections:F,gcsGrid:F?P.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:n.interpolation,alignmentInfo:z,blockWidths:null},n);({pixelBlock:O,localNorthDirections:Z}=e)}else{const e=(0,N.us)(A,E,{alignmentInfo:z});O=D?(0,N.Uk)(e,{width:t,height:i},P.coefficients,B,n.interpolation):e,F&&P.gcsGrid&&(Z=(0,N.Qh)({width:t,height:i},P.gcsGrid),O=(0,L.xQ)(O,this.rasterInfo.dataType,Z))}return n.requestRawData||F?{extent:e,srcExtent:l,srcTilePixelSize:_,pixelBlock:O,transformGrid:P,localNorthDirections:Z,isPartiallyFilled:J}:{extent:e,srcExtent:l,srcTilePixelSize:_,pixelBlock:O}}async _fetchRawTiles(e,t,i,n){const{origin:r,blockBoundary:s}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:o}=this.getBlockWidthHeight(e);let{x:l,y:c}=t,{width:h,height:u,wrapCount:f}=i;const d=this._getRasterTileAlignmentInfo(e,0);n.buffer&&(l-=n.buffer.cols,c-=n.buffer.rows,h+=2*n.buffer.cols,u+=2*n.buffer.rows);let m=0,p=0,y=0;f&&null!=d&&(({worldColumnCountFromOrigin:p,originColumnOffset:y,rightPadding:m}=d),p*d.blockWidth-m>=l+h&&(m=0));const g=Math.floor(l/a),x=Math.floor(c/o),w=Math.floor((l+h+m-1)/a),b=Math.floor((c+u+m-1)/o),I=s[e];if(!I)return null;const{minRow:v,minCol:_,maxCol:S,maxRow:R}=I;if(0===f&&(b<v||w<_||x>R||g>S))return null;const T=new Array;let C=!1;const k=null==this.ioConfig.allowPartialFill?n.allowPartialFill:this.ioConfig.allowPartialFill;for(let t=x;t<=b;t++)for(let i=g;i<=w;i++){let r=i;if(!n.disableWrapAround&&f&&null!=d&&p<=i&&(r=i-p-y),t>=v&&r>=_&&R>=t&&S>=r){const i=this._fetchRawTile(e,t,r,n);k?T.push(new Promise((e=>{i.then((t=>e(t))).catch((()=>{C=!0,e(null)}))}))):T.push(i)}else T.push(Promise.resolve(null))}if(0===T.length)return null;const M=await Promise.all(T),F={height:(b-x+1)*o,width:(w-g+1)*a},{spatialReference:P}=this.rasterInfo,O=this.getPyramidPixelSize(e),{x:D,y:B}=O;return{extent:new W.Z({xmin:r.x+g*a*D,xmax:r.x+(w+1)*a*D,ymin:r.y-(b+1)*o*B,ymax:r.y-x*o*B,spatialReference:P}),pixelBlocks:M,mosaicSize:F,isPartiallyFilled:C}}_isSameResolution(e,t,i){return Math.abs(e.x-t.x)<i&&Math.abs(e.y-t.y)<i}_fetchRawTile(e,t,i,n){const r=this.rasterInfo.storageInfo.blockBoundary[e];if(!r)return Promise.resolve(null);const{minRow:s,minCol:a,maxCol:o,maxRow:c}=r;if(t<s||i<a||t>c||i>o)return Promise.resolve(null);const h=(0,E.Rq)(this.url,n.sliceId),u=`${e}/${t}/${i}`;let f=(0,E.Qg)(h,n.registryId,u);if(null==f){const r=new AbortController;f=this.fetchRawTile(e,t,i,{...n,signal:r.signal}),(0,E.gX)(h,n.registryId,u,f,r),f.catch((()=>(0,E.Gc)(h,n.registryId,u)))}return n.signal&&(0,l.fu)(n,(()=>{(0,E.OE)(h,n.registryId,u)})),f}_computeMagDirValues(e){const{bandCount:t,dataType:i}=this.rasterInfo;if((2!==t||"vector-magdir"!==i)&&"vector-uv"!==i||2!==e?.length||!e[0]?.length)return null;const n=e[0].length;if("vector-magdir"===i){const t=e[1].map((e=>(e+360)%360));return[e[0],t]}const[r,s]=e,a=[],o=[];for(let e=0;e<n;e++){const[t,i]=(0,L.Tg)([r[e],s[e]]);a.push(t),o.push(i)}return[a,o]}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=(0,H.P_)(this.rasterInfo)),null==this._rasterTileAlighmentInfo.pyramidsInfo?null:{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,i,n={}){const r={datumTransformation:n.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};n.srcResolution&&(r.srcResolution=n.srcResolution,this._updateSourceDataInfo(e,r));const s=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:o,pyramidLevel:l}=r,c=a/t,h=o/i,u=l<s&&c*h>=16,f=l===s&&this._requireTooManySrcTiles(a,o,t,i);if(u||f||0===a||0===o){const a=new q.Z({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let o=(0,H.VO)(a,this.rasterInfo.spatialReference,e,r.datumTransformation);const f=!o||n.srcResolution&&o.x+o.y<n.srcResolution.x+n.srcResolution.y;if(u&&n.srcResolution&&f){const e=Math.round(Math.log(Math.max(c,h))/Math.LN2)-1;if(s-l+3>=e){const t=2**e;o={x:n.srcResolution.x*t,y:n.srcResolution.y*t}}}o&&(r.srcResolution=o,this._updateSourceDataInfo(e,r))}return this._requireTooManySrcTiles(r.srcWidth,r.srcHeight,t,i)&&(r.srcWidth=0,r.srcHeight=0),r}_requireTooManySrcTiles(e,t,i,n){const{tileInfo:r}=this.rasterInfo.storageInfo;return Math.ceil(e/r.size[0])*Math.ceil(t/r.size[1])>=256||e/i>8||t/n>8}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const{rasterInfo:i}=this,n=i.spatialReference,{srcResolution:r,datumTransformation:s}=t,{pyramidLevel:a,pyramidResolution:o,excessiveReading:l}=(0,H.kr)(r,i,this.ioConfig.sampling);if(l)return;let c=t.srcExtent||(0,H.tB)(e,n,s);if(null==c)return;const h=i.transform;h&&(c=h.inverseTransform(c)),t.srcExtent=c;const{x:u,y:f}=i.storageInfo.origin,d=Math.floor((c.xmin-u)/o.x+.1),m=Math.floor((f-c.ymax)/o.y+.1),p=Math.floor((c.xmax-u)/o.x-.1),y=Math.floor((f-c.ymin)/o.y-.1),g=c.width<.1*o.x?0:p-d+1,x=c.height<.1*o.y?0:y-m+1;t.pyramidLevel=a,t.pyramidResolution=o,t.srcWidth=g,t.srcHeight=x,t.ul={x:d,y:m}}_getRequestOptionsWithSliceId(e){return null!=this.rasterInfo.multidimensionalInfo&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:i,position:n,pyramidLevel:r,useTransposedTile:s}=t,a=e.pixels[0].length/e.width/e.height;if(e.mask&&!e.mask[n])return{location:i,value:null};const{multidimensionalInfo:o}=this.rasterInfo;if(null==o||!s){const t=e.pixels.map((e=>e[n])),s={location:i,value:t,pyramidLevel:r},a=this._computeMagDirValues(t.map((e=>[e])));return a?.length&&(s.magdirValue=a.map((e=>e[0]))),s}let l=e.pixels.map((e=>e.slice(n*a,n*a+a))),c=this._computeMagDirValues(l);const{requestSomeSlices:h,identifyOptions:u}=t;let f=(0,A.MO)(o,u.transposedVariableName);if(h){const e=(0,A.Ur)(f,u.multidimensionalDefinition,u.timeExtent);l=l.map((t=>e.map((e=>t[e])))),c=c?.map((t=>e.map((e=>t[e])))),f=e.map((e=>f[e]))}const d=e.noDataValues||this.rasterInfo.noDataValue,m={pixels:l,pixelType:e.pixelType};let p;return null!=d&&((0,J.A)(m,d),p=m.mask),{location:i,value:null,dataSeries:f.map(((e,t)=>{const i={value:0===p?.[t]?null:l.map((e=>e[t])),multidimensionalDefinition:e.multidimensionalDefinition.map((e=>new T.Z({...e,isSlice:!0})))};return c?.length&&(i.magdirValue=[c[0][t],c[1][t]]),i})),pyramidLevel:r}}};(0,n._)([(0,h.Cb)()],G.prototype,"_rasterTileAlighmentInfo",void 0),(0,n._)([(0,h.Cb)({readOnly:!0})],G.prototype,"_isGlobalWrappableSource",null),(0,n._)([(0,h.Cb)({readOnly:!0})],G.prototype,"_hasNoneOrGCSShiftTransform",null),(0,n._)([(0,h.Cb)()],G.prototype,"rasterJobHandler",null),(0,n._)([(0,h.Cb)(R.HQ)],G.prototype,"url",null),(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],G.prototype,"datasetName",void 0),(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],G.prototype,"datasetFormat",void 0),(0,n._)([(0,h.Cb)()],G.prototype,"hasUniqueSourceStorageInfo",void 0),(0,n._)([(0,h.Cb)()],G.prototype,"rasterInfo",void 0),(0,n._)([(0,h.Cb)()],G.prototype,"ioConfig",void 0),(0,n._)([(0,h.Cb)()],G.prototype,"sourceJSON",void 0),G=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.BaseRaster")],G);const j=G;var U=i(51211);let $=class extends j{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null}async open(e){await this.init();const{rasterFunction:t}=this;this.primaryRasters?.rasters?.length?t.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=t.getPrimaryRasters(),this.rasterJobHandler&&this.primaryRasters.rasters?.forEach((e=>e.rasterJobHandler=this.rasterJobHandler)));const{rasters:i,rasterIds:n}=this.primaryRasters,r=i.map((t=>t.rasterInfo?void 0:t.open(e)));await Promise.all(r);const a=i.map((({rasterInfo:e})=>e)),o=t.bind({rasterInfos:a,rasterIds:n});if(!o.success||0===a.length)throw new s.Z("raster-function:open",`cannot bind the function: ${o.error??""}`);const l="Table"===t.functionName?t:t.functionArguments?.raster;"Table"===l?.functionName&&(t.rasterInfo.attributeTable=U.Z.fromJSON(l.functionArguments.attributeTableAsRecordSet)),await this.syncJobHandler();const c=a[0];this.hasUniqueSourceStorageInfo=1===a.length||a.slice(1).every((e=>this._hasSameStorageInfo(e,c))),this.set("sourceJSON",i[0].sourceJSON),this.set("rasterInfo",t.rasterInfo)}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async fetchPixels(e,t,i,n={}){const{rasters:r,rasterIds:s}=this.primaryRasters;let a=!1;const{interpolation:o}=n,l=this.rasterFunction.flatWebGLFunctionChain?.hasSurfaceFunction;!n.requestRawData&&"bilinear"!==o&&l&&(a=1===r.length&&!n.skipRasterFunction,n={...n,interpolation:"bilinear",requestRawData:a});const c=r.map((r=>r.fetchPixels(e,t,i,n))),h=await Promise.all(c),u=h.map((e=>e.pixelBlock)),f=a||n.requestRawData?h.map((e=>e.srcTilePixelSize)):null;if(n.skipRasterFunction||u.every((e=>null==e)))return h[0];const d=h.find((e=>null!=e.pixelBlock))?.extent??e,m=this.rasterJobHandler?await this.rasterJobHandler.process({extent:d,primaryPixelBlocks:u,primaryPixelSizes:f,primaryRasterIds:s}):this.rasterFunction.process({extent:d,primaryPixelBlocks:u,primaryPixelSizes:f,primaryRasterIds:s}),{transformGrid:p}=h[0];if(!a||null==m||null==p)return{...h[0],pixelBlock:m};const y={rows:p.spacing[0],cols:p.spacing[1]};let g;return g=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[m],srcMosaicSize:{width:m.width,height:m.height},destDimension:{width:t,height:i},coefs:p.coefficients,sampleSpacing:y,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:o,alignmentInfo:void 0,blockWidths:null},n)).pixelBlock:(0,N.Uk)(m,{width:t,height:i},p.coefficients,y,o),{extent:e,srcExtent:h[0].srcExtent,pixelBlock:g}}_hasSameStorageInfo(e,t){const{storageInfo:i,pixelSize:n,spatialReference:r,extent:s}=e,{storageInfo:a,pixelSize:o,spatialReference:l,extent:c}=t;return n.x===o.x&&n.y===o.y&&r.equals(l)&&s.equals(c)&&i.blockHeight===a.blockHeight&&i.blockWidth===a.blockWidth&&i.maximumPyramidLevel===a.maximumPyramidLevel}};(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],$.prototype,"datasetFormat",void 0),(0,n._)([(0,h.Cb)()],$.prototype,"tileType",void 0),(0,n._)([(0,h.Cb)()],$.prototype,"rasterFunction",void 0),(0,n._)([(0,h.Cb)()],$.prototype,"primaryRasters",void 0),$=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.FunctionRaster")],$);const V=$;var Y=i(17321),X=i(16984);var K=i(1099),Q=i(18015),ee=i(23872),te=i(26903),ie=i(66206),ne=i(88243),re=i(14685);const se=a.Z.getLogger("esri.layers.mixins.ImageryTileMixin"),ae=e=>{let t=class extends e{constructor(...e){super(...e),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster="Function"===e[0]?.raster?.datasetFormat}get fullExtent(){return this.rasterInfo?.extent}set multidimensionalDefinition(e){this._set("multidimensionalDefinition",e),this.updateRenderer()}set rasterFunction(e){"none"===e?.functionName?.toLowerCase()&&(e=void 0),this._set("rasterFunction",e),this.updateRasterFunction()}set url(e){this._set("url",(0,S.Nm)(e,se))}set renderer(e){null==e&&null==this.rasterFunction?this._configDefaultRenderer("override"):(this._set("renderer",e),this.updateRenderer())}readRenderer(e,t,i){const n=t?.layerDefinition?.drawingInfo?.renderer;return(0,b.ij)(n,i)||void 0}async convertVectorFieldData(e,t){if(null==e||!this.rasterInfo)return null;const i=this._rasterJobHandler.instance,n=this.rasterInfo.dataType;return i?i.convertVectorFieldData({pixelBlock:e,dataType:n},t):(0,L.KC)(e,n)}async computeStatisticsHistograms(e,t){e=(0,u.TJ)(ie.Z,e).clone();const{rasterInfo:n}=this,{geometry:r}=e;if(null==r)throw new s.Z("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let a=r;const{spatialReference:o}=n;r.spatialReference.equals(o)||(await(0,H.zD)(),a="extent"===r.type?(0,H.tB)(r,o):(0,H.Wt)(r,o));const l=e.pixelSize??new q.Z({x:n.pixelSize.x,y:n.pixelSize.y,spatialReference:o}),{extent:c,width:h,height:f}=function(e,t,i,n=!0){const{spatialReference:r}=e,{x:s,y:a}=function(e,t){if(e.spatialReference.equals(t))return e;const i=(0,Y.c9)(e.spatialReference),n=(0,Y.c9)(t);if(i===n)return e;const r=i/n;return{x:e.x*r,y:e.y*r}}(i,r);let o,l,c;const h="extent"===t.type?t:t.extent;let{xmin:u,xmax:f,ymax:d,ymin:m}=h;const{xmin:p,ymax:y}=e.extent;return n?(u=p+(u>p?s*Math.round((u-p)/s):0),d=y-(d<y?a*Math.round((y-d)/a):0),f=p+(f>p?s*Math.round((f-p)/s):0),m=y-(m<y?a*Math.round((y-m)/a):0),o=new W.Z({xmin:u,ymax:d,xmax:f,ymin:m,spatialReference:r}),l=Math.round(o.width/s),c=Math.round(o.height/a)):(l=Math.floor((f-u)/s+.8),c=Math.floor((d-m)/a+.8),u=p+(u>p?s*Math.floor((u-p)/s+.1):0),d=y-(d<y?a*Math.floor((y-d)/a+.1):0),f=u+l*s,m=d-c*a,o=new W.Z({xmin:u,ymax:d,xmax:f,ymin:m,spatialReference:r})),{extent:o,width:l,height:c}}(n,a,l),d=await this.fetchPixels(c,h,f,{...t,interpolation:"nearest"});if(null==d.pixelBlock)throw new s.Z("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const m=await async function(e,t,n){if("extent"===n.type)return function(e,t,i){const{width:n,height:r}=e,s=new Uint8Array(n*r),a=t.width/n,o=t.height/r;if(i.width/a<.5||i.height/o<.5)return new X.Z({pixelType:e.pixelType,width:n,height:r,mask:s,pixels:[...e.pixels]});const{xmin:l,xmax:c,ymin:h,ymax:u}=t,{xmin:f,xmax:d,ymin:m,ymax:p}=i,y=Math.max(l,f),g=Math.min(c,d),x=Math.max(h,m),w=Math.min(u,p),b=.5*a,I=.5*o;if(g-y<b||w-x<I||g<l+b||y>c-b||x>u-I||w<h+I)return new X.Z({pixelType:e.pixelType,width:n,height:r,mask:s,pixels:[...e.pixels]});const v=Math.max(0,(y-l)/a),_=Math.min(n,Math.max(0,(g-l)/a)),S=Math.max(0,(u-w)/o),R=Math.min(r,Math.max(0,(u-x)/o)),T=Math.round(v),C=Math.round(_)-1,k=Math.round(S),M=Math.round(R)-1;if(T===C&&v%1>.5&&_%1<.5||k===M&&S%1>.5&&R%1<.5)return new X.Z({pixelType:e.pixelType,width:n,height:r,mask:s,pixels:[...e.pixels]});if(0===T&&0===k&&C===n&&M===r)return e;const F=e.mask;for(let e=k;e<=M;e++)for(let t=T;t<=C;t++){const i=e*n+t;s[i]=F?F[i]:255}return new X.Z({pixelType:e.pixelType,width:n,height:r,mask:s,pixels:[...e.pixels]})}(e,t,n);const{width:r,height:s}=e,a=new Uint8Array(r*s),{contains:o,intersects:l}=await Promise.all([i.e(89067),i.e(17700)]).then(i.bind(i,17700));return l(t,n)?"polyline"===n.type?function(e,t,i){const{width:n,height:r}=e,s=new Uint8Array(n*r),a=t.width/n,o=t.height/r,{xmin:l,ymax:c}=t,{paths:h}=i,u=e.mask;for(let e=0;e<h.length;e++){const t=h[e];for(let e=0;e<t.length-1;e++){const[i,h]=t[e],[f,d]=t[e+1];let m=Math.floor((c-h)/o),p=Math.floor((c-d)/o);if(p<m){const e=m;m=p,p=e}m=Math.max(0,m),p=Math.min(r-1,p);const y=(f-i)/(d-h);for(let e=m;e<=p;e++){const t=e===m?Math.max(h,d):(r+1-e)*o,c=e===p?Math.min(h,d):t-o;let g=d===h?Math.floor((i-l)/a):Math.floor((y*(t-h)+i-l)/a),x=d===h?Math.floor((f-l)/a):Math.floor((y*(c-h)+i-l)/a);if(x<g){const e=g;g=x,x=e}const w=e*n;g=Math.max(0,g),x=Math.min(n-1,x);for(let e=w+g;e<=w+x;e++)s[e]=u?u[e]:255}}}return new X.Z({pixelType:e.pixelType,width:n,height:r,mask:s,pixels:[...e.pixels]})}(e,t,n):o(n,t)?e:function(e,t,i){if(!e)return e;const{width:n,height:r}=e,s=t.width/n,a=t.height/r,{xmin:o,ymax:l}=t;let c;if("extent"===i.type){const e=(i.xmin-o)/s,t=(i.xmax-o)/s,n=(l-i.ymax)/a,r=(l-i.ymin)/a;c=[[[e,n],[e,r],[t,r],[t,n],[e,n]]]}else c=i.rings.map((e=>e.map((([e,t])=>[(e-o)/s,(l-t)/a]))));const h=document.createElement("canvas");h.width=n,h.height=r;const u=h.getContext("2d");u.fillStyle="#f00",c.forEach((e=>{u.beginPath(),u.moveTo(e[0][0],e[0][1]);for(let t=0;t<e.length;t++)u.lineTo(e[t][0],e[t][1]);u.closePath(),u.fill()}));const f=u.getImageData(0,0,n,r).data,d=e.mask,m=n*r,p=new Uint8Array(m);for(let e=0;e<m;e++)d&&!d[e]||(p[e]=f[4*e+3]>127?255:0);return new X.Z({pixelType:e.pixelType,width:n,height:r,mask:p,maskIsAlpha:!1,pixels:[...e.pixels]})}(e,t,n):new X.Z({pixelType:e.pixelType,width:r,height:s,mask:a,maskIsAlpha:!1,pixels:[...e.pixels]})}(d.pixelBlock,c,a),p=this._rasterJobHandler.instance;return p?p.computeStatisticsHistograms({pixelBlock:m},t):(0,Q.js)(m)}async createFlowMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(e,t):(0,ne.GE)(e.meshType,e.simulationSettings,e.flowData,null!=t.signal?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.rasterInfo??{};if(null==t)return e;let i=e.multidimensionalDefinition||this.multidimensionalDefinition;null!=i&&i.length||(i=(0,A.Tj)(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const n=e.timeExtent||this.timeExtent;if(null!=i&&null!=n&&(null!=n.start||null!=n.end)){i=i.map((e=>e.clone()));const r=t.variables.find((({name:e})=>e===i[0].variableName))?.dimensions?.find((({name:e})=>"StdTime"===e)),s=i.find((({dimensionName:e})=>"StdTime"===e));if(!r||!s)return{...e,multidimensionalDefinition:null};const{start:a,end:o}=n,l=null==a?null:a.getTime(),c=null==o?null:o.getTime(),h=l??c,u=c??l;if(null!=r.values){const e=r.values.filter((e=>{if(Array.isArray(e)){if(h===u)return e[0]<=h&&e[1]>=h;const t=e[0]<=h&&e[1]>h||e[0]<u&&e[1]>=u,i=e[0]>=h&&e[1]<=u||e[0]<h&&e[1]>u;return t||i}return h===u?e===h:e>=h&&e<=u}));if(e.length){const t=e.sort(((e,t)=>{const i=Array.isArray(e)?e[0]:e,n=Array.isArray(e)?e[1]:e,r=Array.isArray(t)?t[0]:t,s=Array.isArray(t)?t[1]:t;return h===u?i-r:Math.abs(n-u)-Math.abs(s-u)}))[0];s.values=[t]}else i=null}else if(r.hasRegularIntervals&&r.extent){const[e,t]=r.extent;h>t||u<e?i=null:s.values=h===u?[h]:[Math.max(e,h),Math.min(t,u)]}}return null!=i&&(0,A.nb)(i,this.multidimensionalSubset)?{...e,multidimensionalDefinition:null}:{...e,multidimensionalDefinition:i}}async updateRasterFunction(){if(!this.loaded||"imagery-tile"!==this.type||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&"Function"===this.raster.datasetFormat){const e=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&e&&this._set("rasterFunction",k.Z.fromJSON(e)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let e,t=this.raster,i=!1;"Function"===t.datasetFormat?(e=t.primaryRasters.rasters,t=e[0],i=!0):e=[t];const{rasterFunction:n}=this;if(n){const i={raster:t};e.length>1&&e.forEach((e=>i[e.url]=e));const r=(0,K.Ue)(n.functionDefinition?.toJSON()??n.toJSON(),i),s=new V({rasterFunction:r});s.rasterJobHandler=this._rasterJobHandler.instance,await s.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=s}else this.raster=t,this._cachedRasterFunctionJson=null,await t.when();if(this._cachedRendererJson=null,!i&&!n)return;const{bandIds:r}=this,{bandCount:s}=this.raster.rasterInfo,a=r?.length?r.some((e=>e>=s)):s>=3;r&&(a||this.renderer&&"raster-stretch"!==this.renderer.type)&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:e,symbolizer:t}=this;if(!e||!t||!this.renderer)return;const{rasterInfo:i}=this.raster,n=(0,A.WY)(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),r=n?.name,s=(0,ee.ol)({...this.renderer.toJSON(),variableName:r});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(s))return;const a=this._rasterJobHandler.instance;a&&(t.rasterInfo=(0,ee.FI)(i,r),t.rendererJSON=s,t.bind(),await a.updateSymbolizer(t),this._cachedRendererJson=s)}async applyRenderer(e,t){const i=e&&e.pixelBlock;if(!(null!=i&&i.pixels&&i.pixels.length>0))return null;let n;await this.updateRenderer();const r=this._rasterJobHandler.instance,s=this.bandIds??[];return n=r?await r.symbolize({...e,simpleStretchParams:t,bandIds:s}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:s}),n}getTileUrl(e,t,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${i}`:""}getCompatibleTileInfo(e,t,i=!1){if(!this.loaded||null==t)return null;if(i&&e.equals(this.spatialReference))return this.tileInfo;const n=(0,_.C5)(e);return F.Z.create({size:256,spatialReference:e,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,i,n={}){if(r(this),n.requestAsImageElement){const r=this.getTileUrl(e,t,i);return(0,I.default)(r,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then((e=>e.data))}const{rasterInfo:s}=this;if(null!=s.multidimensionalInfo&&null==(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition){const r=n.tileInfo||s.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,i,r),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),"raster-shaded-relief"===this.renderer?.type&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,i,n)}async fetchPixels(e,t,i,n={}){return null!=this.rasterInfo.multidimensionalInfo&&null==(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition?{extent:e,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),t=Math.round(t),i=Math.round(i),this.raster.fetchPixels(e,t,i,n))}async identify(e,t={}){const{raster:i,rasterInfo:n}=this;if(null!=n.multidimensionalInfo&&!(n.hasMultidimensionalTranspose&&((0,A.WU)(t.multidimensionalDefinition)||t.transposedVariableName||t.timeExtent)||null!=(t=this.normalizeRasterFetchOptions(t)).multidimensionalDefinition))return{location:e,value:null};const r=this.multidimensionalSubset?.areaOfInterest;if(r&&!r.contains(e))throw new s.Z("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return i.identify(e,t)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const e=this.rasterInfo?.multidimensionalInfo;if(null==e||"standard-time"!==this.rasterInfo?.dataType)return!1;const t=this.multidimensionalDefinition,i=t?.[0]?.variableName;return e.variables.some((e=>e.name===i&&(!t?.[0].dimensionName||e.dimensions.some((e=>"StdTime"===e.name)))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(e){const t=e??this.rasterInfo?.multidimensionalInfo;return(0,A.jj)(this.multidimensionalSubset,t)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=(0,A.Tj)(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&"Function"===this.raster.datasetFormat&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new M.Z;return this._rasterJobHandler.connectionPromise=e.initialize().then((async()=>{r(this),this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,"Function"===this.raster.datasetFormat&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch((()=>{})),this.renderer&&this.updateRenderer()})).catch((()=>{})),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(null==this.interpolation){r(this);const{raster:e}=this,t=(0,ee.In)(e.rasterInfo,e.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",t)}}_configDefaultRenderer(e="no"){r(this);const{rasterInfo:t}=this.raster;!this.bandIds&&t.bandCount>1&&(this.bandIds=(0,ee.YD)(t));const i=(0,A.WY)(t,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),n=i?.name;if(!this.renderer||"override"===e){const e=(0,ee.Ob)(t,{bandIds:this.bandIds,variableName:n}),i=t.statistics,r=i&&i.length>0?i[0]:null,s=r?.max??0,a=r?.min??0;"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===e.type&&(s>1e24||a<-1e24)&&(e.dynamicRangeAdjustment=!0,e.statistics=null,"none"===e.stretchType&&(e.stretchType="min-max")),this.renderer=e}const s=(0,ee.ol)({...this.renderer.toJSON(),variableName:n}),a=(0,ee.FI)(t,n);this.symbolizer?(this.symbolizer.rendererJSON=s,this.symbolizer.rasterInfo=a):this.symbolizer=new te.Z({rendererJSON:s,rasterInfo:a});const o=this.symbolizer.bind();if(o.success){if("auto"===e){const{colormap:e}=this.raster.rasterInfo,t=this.renderer;if(null!=e&&"raster-colormap"===t.type){const e=(0,ee.Ob)(this.raster.rasterInfo);JSON.stringify(e)!==JSON.stringify(t)&&this._configDefaultRenderer("override")}else if("raster-stretch"===t.type){const e=this.bandIds?.length,i=t.statistics?.length;!t.dynamicRangeAdjustment&&i&&e&&i!==e&&this._configDefaultRenderer("override")}}}else se.warn("imagery-tile-mixin",o.error||"The given renderer is not supported by the layer."),"auto"===e&&this._configDefaultRenderer("override")}};function r(e){if(!e.raster||!e.rasterInfo)throw new s.Z("imagery-tile","no raster")}return(0,n._)([(0,h.Cb)()],t.prototype,"_cachedRendererJson",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"_cachedRasterFunctionJson",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"_compatibleFullExtent",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"_isConstructedFromFunctionRaster",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"_rasterJobHandler",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"bandIds",void 0),(0,n._)([(0,h.Cb)({json:{origins:{service:{read:{source:"copyrightText"}}}}})],t.prototype,"copyright",void 0),(0,n._)([(0,h.Cb)({json:{read:!1}})],t.prototype,"fullExtent",null),(0,n._)([(0,h.Cb)()],t.prototype,"interpolation",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"ioConfig",void 0),(0,n._)([(0,h.Cb)({type:[T.Z],json:{write:!0}})],t.prototype,"multidimensionalDefinition",null),(0,n._)([(0,h.Cb)({type:C.Z,json:{write:!0}})],t.prototype,"multidimensionalSubset",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"raster",void 0),(0,n._)([(0,h.Cb)({type:k.Z,json:{name:"renderingRule",write:!0}})],t.prototype,"rasterFunction",null),(0,n._)([(0,h.Cb)()],t.prototype,"rasterInfo",void 0),(0,n._)([(0,h.Cb)()],t.prototype,"sourceJSON",void 0),(0,n._)([(0,h.Cb)({readOnly:!0,type:re.Z,json:{read:!1}})],t.prototype,"spatialReference",void 0),(0,n._)([(0,h.Cb)({type:F.Z})],t.prototype,"tileInfo",void 0),(0,n._)([(0,h.Cb)(R.HQ)],t.prototype,"url",null),(0,n._)([(0,h.Cb)({types:b.dr,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:b.FK,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],t.prototype,"renderer",null),(0,n._)([(0,v.r)("renderer")],t.prototype,"readRenderer",null),(0,n._)([(0,h.Cb)()],t.prototype,"symbolizer",void 0),t=(0,n._)([(0,p.j)("esri.layers.ImageryTileMixin")],t),t};var oe=i(43330),le=i(18241),ce=i(12478),he=i(95874),ue=i(2030),fe=i(12512),de=i(73556),me=i(16130),pe=i(30979);function ye(e){const t=e.fields,i=e.records,n=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",r=[{name:n,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),s=r.map((e=>e.name)),a=[];let o=0,l=0;return i.forEach((e=>{const t={};for(t[n]=o++,l=1;l<s.length;l++)t[s[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:r,features:a}}class ge{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),i=3&t.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const n=t.getUint32(4,!0),r=t.getUint16(8,!0),s=t.getUint16(10,!0),a={version:i,recordCount:n,headerByteCount:r,recordByteCount:s};let o=32;const l=[],c=[];let h;if(3===i){for(;13!==t.getUint8(o);)h=String.fromCharCode(t.getUint8(o+11)).trim(),l.push({name:(0,pe.f)(new Uint8Array(e,o,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:t.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;c.length<n&&e.byteLength-o>s;){const i=[];32===t.getUint8(o)?(o+=1,l.forEach((t=>{if("C"===t.type)i.push((0,pe.f)(new Uint8Array(e,o,t.length)).trim());else if("N"===t.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim(),10));else if("F"===t.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim()));else if("D"===t.type){const n=String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim();i.push(new Date(parseInt(n.substring(0,4),10),parseInt(n.substring(4,6),10)-1,parseInt(n.substring(6,8),10)))}o+=t.length})),c.push(i)):o+=s}}return{header:a,fields:l,records:c,recordSet:ye({fields:l,records:c})}}}var xe=i(78586);const we=new Map;we.set("int16","esriFieldTypeSmallInteger"),we.set("int32","esriFieldTypeInteger"),we.set("int64","esriFieldTypeInteger"),we.set("float32","esriFieldTypeSingle"),we.set("float64","esriFieldTypeDouble"),we.set("text","esriFieldTypeString");let be=class extends j{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:e?.signal});if(!this._validateHeader(t))throw new s.Z("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:n}=this._parseHeader(t);if("thematic"===n.dataType){const e=await this._fetchAuxiliaryInformation();n.attributeTable=e}this._set("storageInfo",i),this._set("rasterInfo",n),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,i,n={}){const{transposeInfo:r}=this.rasterInfo.storageInfo,{transposedVariableName:s}=n,a=!(!r||!s),o=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(o<0)return null;const l=this._buildCacheFilePath(o,t,i,n.multidimensionalDefinition,s),c=this._getIndexRecordFromBundle(t,i,a),h=await this.request(l,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:n.signal});if(!h)return null;const u=new Uint8Array(h.data),f=this._getTileEndAndContentType(u,c);if(0===f.recordSize)return null;const d=await this.request(l,{range:{from:f.position,to:f.position+f.recordSize},responseType:"array-buffer",signal:n.signal});if(!d)return null;const[m,p]=this._getTileSize(a);return this.decodePixelBlock(d.data,{width:m,height:p,planes:null,pixelType:null,returnInterleaved:a})}_validateHeader(e){return e&&"RasterInfo"===e.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((t=>!e[t]))}_parseHeader(e){const t=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:i,histograms:n,colormap:r,blockWidth:s,blockHeight:a,firstPyramidLevel:o,maximumPyramidLevel:l}=e,c=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),h=e.extent.spatialReference,u=e.geodataXform?.spatialReference,f=new re.Z(h?.wkid||h?.wkt?h:u);let d=new W.Z({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:f});const m=new q.Z({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:f}),p=Math.round((d.xmax-d.xmin)/m.x),y=Math.round((d.ymax-d.ymin)/m.y),g=this._parseTransform(e.geodataXform),x=g?d:null;g&&(d=g.forwardTransform(d),m.x=(d.xmax-d.xmin)/p,m.y=(d.ymax-d.ymin)/y);const w=e.properties??{},b=e.format.toLowerCase().replace("cache/",""),I=new q.Z(e.origin.x,e.origin.y,f);let v,_,S,R;if(r&&r.colors)for(v=[],_=0;_<r.colors.length;_++)S=r.colors[_],R=r.values?r.values[_]:_,v.push([R,255&S,S<<16>>>24,S<<8>>>24,S>>>24]);const T=e.LODInfos,C=[];for(_=0;_<T.levels.length;_++)C.push(new B.Z({level:T.levels[_],resolution:T.resolutions[_],scale:96/.0254*T.resolutions[_]}));const k=new F.Z({dpi:96,lods:C,format:b,origin:I,size:[s,a],spatialReference:f}),M={recordSize:8,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*8+64},P=[{maxCol:Math.ceil(p/s)-1,maxRow:Math.ceil(y/a)-1,minCol:0,minRow:0}];let O=2;if(l>0)for(_=0;_<l;_++)P.push({maxCol:Math.ceil(p/O/s)-1,maxRow:Math.ceil(y/O/a)-1,minCol:0,minRow:0}),O*=2;const D=e.mdInfo;let A=null;if(D&&w._yxs){const e=w._yxs;A={packetSize:e.PacketSize,tileSize:[e.TileXSize,e.TileYSize]}}return{storageInfo:M,rasterInfo:new me.Z({width:p,height:y,pixelType:t,bandCount:i,extent:d,nativeExtent:x,transform:g,spatialReference:f,pixelSize:m,keyProperties:w,statistics:c,histograms:n,multidimensionalInfo:D,colormap:v,storageInfo:new z.Z({blockWidth:s,blockHeight:a,pyramidBlockWidth:s,pyramidBlockHeight:a,origin:I,tileInfo:k,transposeInfo:A,firstPyramidLevel:o,maximumPyramidLevel:l,blockBoundary:P})})}}_parseTransform(e){if(!(0,xe.j)(e))throw new s.Z("cloudraster:open","the data contains unsupported geodata transform types");const t=(0,xe.c)(e);if("identity"===t.type)return null;if("polynomial"!==t.type||!t.forwardCoefficients?.length||!t.inverseCoefficients?.length)throw new s.Z("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return t}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),n=await Promise.all([t,i]);let r;if(n[0]){let e=n[0].fields;const t=n[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":we.get(e.type),name:e.name,alias:e.alias||e.name})));const i=t.map((e=>({attributes:e})));e&&t&&(r={fields:e,features:i})}}return!r&&n[1]&&(r=ge.parse(n[1]).recordSet),U.Z.fromJSON(r)}_buildCacheFilePath(e,t,i,n,r){const s=this._getPackageSize(!!r),a=Math.floor(t/s)*s,o=Math.floor(i/s)*s,l="R"+this._toHexString4(a)+"C"+this._toHexString4(o);let c="L";c+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:h}=this.rasterInfo,u=n?.[0];if(null==h||!u)return`${this.url}/_alllayers/${c}/${l}.bundle`;let f="_yxs";if(!r){f=h.variables.find((e=>e.name===u.variableName)).dimensions[0].values.indexOf(u.values[0]).toString(16);const e=4-f.length;for(let t=0;t<e;t++)f="0"+f;f="S"+f}const d=this._getVariableFolderName(r||u.variableName);return`${this.url}/_alllayers/${d}/${f}/${c}/${l}.bundle`}_getPackageSize(e=!1){const{transposeInfo:t}=this.rasterInfo.storageInfo;return e&&null!=t?t.packetSize??0:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:t}=this.rasterInfo,{transposeInfo:i}=t;return e&&null!=i?i.tileSize:t.tileInfo.size}_getVariableFolderName(e){return""===(e=e.trim())?"_v":e.replaceAll(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,t,i=!1){const n=this._getPackageSize(i),r=n*(e%n)+t%n;if(r<0)throw new Error("Invalid level / row / col");return 20+r*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const i=e.subarray(t,t+8);let n,r=0;for(n=0;n<5;n++)r|=(255&i[n])<<8*n;const s=0xffffffffff&r;for(r=0,n=5;n<8;n++)r|=(255&i[n])<<8*(n-5);return{position:s,recordSize:0xffffffffff&r}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};(0,n._)([(0,h.Cb)({readOnly:!0})],be.prototype,"storageInfo",void 0),(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],be.prototype,"datasetFormat",void 0),be=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.CloudRaster")],be);const Ie=be;let ve=class extends j{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.data=null}async open(e){await this.init();const t=this.data,{pixelBlock:i,statistics:n,histograms:r,name:s,keyProperties:a,nativeExtent:o,transform:l}=this.data,{width:c,height:h,pixelType:u}=i,f=t.extent??new W.Z({xmin:-.5,ymin:.5,xmax:c-.5,ymax:h-.5,spatialReference:new re.Z({wkid:3857})}),d=t.isPseudoSpatialReference??!t.extent,m={x:f.width/c,y:f.height/h},p=new me.Z({width:c,height:h,pixelType:u,extent:f,nativeExtent:o,transform:l,pixelSize:m,spatialReference:f.spatialReference,bandCount:i.pixels.length,keyProperties:a||{},statistics:n,isPseudoSpatialReference:d,histograms:r});this.createRemoteDatasetStorageInfo(p,512,512),this._set("rasterInfo",p),this.updateTileInfo(),await this._buildInMemoryRaster(i,{width:512,height:512},e),this.datasetName=s,this.url="/InMemory/"+s}fetchRawTile(e,t,i,n={}){const r=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(r)}async _buildInMemoryRaster(e,t,i){const n=this.rasterInfo.storageInfo.maximumPyramidLevel,r=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:n},i):Promise.resolve((0,N.Vl)(e,t,n)),a=null!=this.rasterInfo.statistics,o=null!=this.rasterInfo.histograms,c=a?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve((0,Q.Hv)(e)),h=await(0,l.as)([r,c]);if(!h[0].value&&h[1].value)throw new s.Z("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=h[0].value,a||(this.rasterInfo.statistics=h[1].value?.statistics),o||(this.rasterInfo.histograms=h[1].value?.histograms)}};(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],ve.prototype,"datasetFormat",void 0),(0,n._)([(0,h.Cb)()],ve.prototype,"data",void 0),ve=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.InMemoryRaster")],ve);const _e=ve;function Se(e,t){if(!e||!t)return[];let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const n=[];if(t){const r=Se(e,i);for(let e=0;e<r.length;e++)Se(r[e],t).forEach((e=>n.push(e)));return n}const r=e.getElementsByTagNameNS("*",i);if(!r||0===r.length)return[];for(let e=0;e<r.length;e++)n.push(r[e]||r.item(e));return n}function Re(e,t){if(!e||!t)return null;let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const n=Se(e,i);return n.length>0?t?Re(n[0],t):n[0]:null}function Te(e,t=null){const i=t?Re(e,t):e;let n;return i?(n=i.textContent||i.nodeValue,n?n.trim():null):null}function Ce(e,t){return function(e,t){const i=Se(e,t),n=[];let r;for(let e=0;e<i.length;e++)r=i[e].textContent||i[e].nodeValue,r&&(r=r.trim(),""!==r&&n.push(r));return n}(e,t).map((e=>Number(e)))}function ke(e,t){const i=Te(e,t);return Number(i)}function Me(e,t){const i=e?.nodeName?.toLowerCase(),n=t.toLowerCase();return i.slice(i.lastIndexOf(":")+1)===n}var Fe=i(35952);function Pe(e,t){if(!e||!t)return null;const i=[];for(let n=0;n<e.length;n++)i.push(e[n]),i.push(t[n]);return i}function Oe(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new re.Z({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const i=e.indexOf("VERTCS"),n=e.indexOf("PROJCS"),r=n>-1?n:e.indexOf("GEOGCS");if(-1===r)return null;const s=e.slice(r,e.lastIndexOf("]",i)+1).trim(),a=e.slice(i,e.lastIndexOf("]")).trim();t=De(s);const o=new re.Z(t?{wkid:t}:{wkt:s}),l=De(a);return l&&(o.vcsWkid=l),o}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=De(e),new re.Z(0!==t?{wkid:t}:{wkt:e})):null}function De(e){const t=e.replaceAll("]","[").replaceAll('"',"").split("[").map((e=>e.trim())).filter((e=>""!==e)),i=t[t.length-1].split(","),n=i[0]?.toLowerCase();if(("epsg"===n||"esri"===n)&&e.endsWith('"]]')){const e=Number(i[1]);if(!isNaN(e)&&0!==e)return e}return 0}function Be(e){if("pamdataset"!==e?.documentElement.tagName?.toLowerCase())return{};const t={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(Me(e,"SRS")){if(!t.spatialReference){const i=Te(e);t.spatialReference=Oe(i)}}else if(Me(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:i,transform:n}=function(e){const t=Re(e,"GeodataXform"),i=Oe(ke(t,"SpatialReference/WKID")||Te(t,"SpatialReference/WKT"));if("typens:PolynomialXform"!==t.getAttribute("xsi:type"))return{spatialReference:i,transform:null};const n=ke(t,"PolynomialOrder")??1,r=Ce(t,"CoeffX/Double"),s=Ce(t,"CoeffY/Double"),a=Ce(t,"InverseCoeffX/Double"),o=Ce(t,"InverseCoeffY/Double"),l=Pe(r,s),c=Pe(a,o);return{spatialReference:i,transform:l&&c&&l.length&&c.length?new Fe.Z({spatialReference:i,polynomialOrder:n,forwardCoefficients:l,inverseCoefficients:c}):null}}(e);t.transform=n,t.spatialReference||(t.spatialReference=i)}else Se(e,"MDI").forEach((e=>t.metadata[e.getAttribute("key")]=Te(e)));else if(Me(e,"PAMRasterBand")){const i=function(e){const t=ke(e,"NoDataValue"),i=Re(e,"Histograms/HistItem"),n=ke(i,"HistMin"),r=ke(i,"HistMax"),s=ke(i,"BucketCount"),a=Te(i,"HistCounts")?.split("|").map((e=>Number(e)));let o,l,c,h;Se(e,"Metadata/MDI").forEach((e=>{const t=Number(e.textContent??e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=t;break;case"STATISTICS_MAXIMUM":l=t;break;case"STATISTICS_MEAN":c=t;break;case"STATISTICS_STDDEV":h=t}}));const u=ke(e,"Metadata/SourceBandIndex");return{noDataValue:t,histogram:a?.length&&null!=n&&null!=r?{min:n,max:r,size:s||a.length,counts:a}:null,sourceBandIndex:u,statistics:null!=o&&null!=l?{min:o,max:l,avg:c,stddev:h}:null}}(e);null!=i.sourceBandIndex&&null==t.rasterBands[i.sourceBandIndex]?t.rasterBands[i.sourceBandIndex]=i:t.rasterBands.push(i)}}));const i=t.rasterBands;if(i.length){const e=!!i[0].statistics;t.statistics=e?i.map((e=>e.statistics)).filter(f.pC):null;const n=!!i[0].histogram;t.histograms=n?i.map((e=>e.histogram)).filter(f.pC):null}return t}let ze=class extends j{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:i,statistics:n,histograms:r,transform:s}=await this._fetchAuxiliaryData(e);const a=!i;a&&(i=new re.Z({wkid:3857})),r?.length&&null==n&&(n=(0,Q.Oh)(r));const{width:o,height:l}=t;let c=new W.Z({xmin:-.5,ymin:.5-l,xmax:o-.5,ymax:.5,spatialReference:i});const h=s?s.forwardTransform(c):c;let u=!0;if(s){const e=s.forwardCoefficients;u=e&&0===e[1]&&0===e[2],u&&(s=null,c=h)}const f=new _e({data:{extent:h,nativeExtent:c,transform:s,pixelBlock:t,statistics:n,histograms:r,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await f.open(),f.data=null,this._set("rasterInfo",f.rasterInfo),this._inMemoryRaster=f}fetchRawTile(e,t,i,n={}){return this._inMemoryRaster.fetchRawTile(e,t,i,n)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e?.signal}),i=(0,Z.y)(t).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new s.Z("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",i);const n=i.toLowerCase(),r="gif"===n||"bmp"===n||!(0,d.Z)("ios"),a=await this.decodePixelBlock(t,{format:n,useCanvas:r,hasNoZlibMask:!0});if(null==a)throw new s.Z("image-aux-raster:open","the data cannot be decoded");return a}async _fetchAuxiliaryData(e){const t=e?.signal,i=this.ioConfig.skipExtensions??[],n=i.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:t}),r=this.datasetFormat,s="JPG"===r?"jgw":"PNG"===r?"pgw":"BMP"===r?"bpw":null,a=s&&i.includes(s)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+s,{responseType:"text",signal:t}),o=await(0,l.as)([n,a]);if(t?.aborted)throw(0,l.zE)();const c=Be(o[0].value?.data);if(!c.transform){const e=o[1].value?o[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;c.transform=6===e?.length?new Fe.Z({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return c}};(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],ze.prototype,"datasetFormat",void 0),ze=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.ImageAuxRaster")],ze);const Ae=ze;var Ee=i(3466),Je=i(43550),Ze=i(2066),Ne=i(57232);let He=class extends j{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(e){await this.init();const t=e&&e.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const n=i.data;if(this.sourceJSON=n,!n)throw new s.Z("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!n.tileInfo)throw new s.Z("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo(),this.tileType=n.cacheType,null==this.tileType&&(["jpg","jpeg","png","png8","png24","png32","mixed"].includes(n.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===n.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=n.name?.slice(n.name.indexOf("/")+1)??"";const r=await this._fetchRasterInfo({signal:t});if(null==r)throw new s.Z("image-server-raster:open","cannot initialize image service");const a="Map"===this.tileType?function(e,t){if(!e)return null;const{minScale:i,maxScale:n,minLOD:r,maxLOD:s}=t;if(null!=r&&null!=s)return F.Z.fromJSON({...e,lods:e.lods.filter((({level:e})=>null!=e&&e>=r&&e<=s))});if(0!==i&&0!==n){const t=e=>Math.round(1e4*e)/1e4,r=i?t(i):1/0,s=n?t(n):-1/0;return F.Z.fromJSON({...e,lods:e.lods.filter((e=>{const i=t(e.scale);return i<=r&&i>=s}))})}return F.Z.fromJSON(e)}(n.tileInfo,n):F.Z.fromJSON(n.tileInfo);(0,O.O3)(a);const[o,l]=this._computeMinMaxLOD(r,a),{extent:c,pixelSize:h}=r,u=.5/r.width*h.x,f=Math.max(h.x,h.y),{lods:d}=a;("Map"!==this.tileType&&0!==n.maxScale||Math.abs(h.x-h.y)>u||!d.some((e=>Math.abs(e.resolution-f)<u)))&&(h.x=h.y=o.resolution,r.width=Math.ceil((c.xmax-c.xmin)/h.x-.1),r.height=Math.ceil((c.ymax-c.ymin)/h.y-.1));const m=o.level-l.level,[p,y]=a.size,g=[],x=[];d.forEach(((e,t)=>{e.level>=l.level&&e.level<=o.level&&g.push({x:e.resolution,y:e.resolution}),t<d.length-1&&x.push(Math.round(10*e.resolution/d[t+1].resolution)/10)})),g.sort(((e,t)=>e.x-t.x));const w=this.computeBlockBoundary(c,p,y,a.origin,g,m),b=g.length>1?g.slice(1):null;let I;n.transposeInfo&&(I={tileSize:[n.transposeInfo.rows,n.transposeInfo.cols],packetSize:r.keyProperties?._yxs.PacketSize??0});const v=x.length<=1||x.length>=3&&x.slice(0,x.length-1).every((e=>e===x[0]))?x[0]??2:Math.round(10/(l.resolution/o.resolution)**(-1/m))/10;if(r.storageInfo=new z.Z({blockWidth:a.size[0],blockHeight:a.size[1],pyramidBlockWidth:a.size[0],pyramidBlockHeight:a.size[1],pyramidResolutions:b,pyramidScalingFactor:v,compression:a.format,origin:a.origin,firstPyramidLevel:1,maximumPyramidLevel:m,tileInfo:a,transposeInfo:I,blockBoundary:w}),this._fixGCSShift(r),this._set("rasterInfo",r),n.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:r.storageInfo.tileInfo,parsedUrl:(0,Ee.mN)(this.url),url:this.url,tileServers:[]};this._tilemapCache=new Je.y({layer:e})}}async fetchRawTile(e,t,i,n={}){const{storageInfo:r,extent:s}=this.rasterInfo,{transposeInfo:a}=r,o=null!=a&&!!n.transposedVariableName;if(this._slices&&!o&&null==n.sliceId)return null;const l=o?0:r.maximumPyramidLevel-e+this._levelOffset,c=`${this.url}/tile/${l}/${t}/${i}`,h=this._slices?o?{variable:n.transposedVariableName}:{sliceId:n.sliceId||0}:null,{data:u}=await this.request(c,{query:h,responseType:"array-buffer",signal:n.signal});if(!u)return null;const f=o?a.tileSize:r.tileInfo.size,d=await this.decodePixelBlock(u,{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:o,noDataValue:this.rasterInfo.noDataValue});if(null==d)return null;const m=r.blockBoundary[e];if("jpg"!==r.compression||i>m.minCol&&i<m.maxCol&&t>m.minRow&&t<m.maxRow)return d;const{origin:p,blockWidth:y,blockHeight:g}=r,{x,y:w}=this.getPyramidPixelSize(e),b=Math.round((s.xmin-p.x)/x)%y,I=Math.round((s.xmax-p.x)/x)%y||y,v=Math.round((p.y-s.ymax)/w)%g,_=Math.round((p.y-s.ymin)/w)%g||g,S=i===m.minCol?b:0,R=t===m.minRow?v:0,T=i===m.maxCol?I:y,C=t===m.maxRow?_:g;return(0,N.pW)(d,{x:S,y:R},{width:T-S,height:C-R}),d}getSliceIndex(e){if(!this._slices||null==e||0===e.length)return null;const t=e;for(let e=0;e<this._slices.length;e++){const i=this._slices[e].multidimensionalDefinition;if(i.length===t.length&&!i.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));return!i||(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return e}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),n=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),r=await Promise.all([i,n]);return r[0]&&r[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:r[0]||null,histograms:r[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,t.datumTransformation);if(null===i)return null;let n=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let s=r-n+this._levelOffset;const a=i.srcLocation;for(;s>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(s,i.row,i.col,t))break}catch{}if(s--,n++,i=this.identifyPixelLocation(a,n,t.datumTransformation),null===i)return null}return-1===s||null==i?null:n}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=t.fullExtent||t.extent,i=Math.ceil((e.xmax-e.xmin)/t.pixelSizeX-.1),n=Math.ceil((e.ymax-e.ymin)/t.pixelSizeY-.1),r=re.Z.fromJSON(t.spatialReference||e.spatialReference),s=new q.Z({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:r});return new me.Z({width:i,height:n,bandCount:3,extent:W.Z.fromJSON(e),spatialReference:r,pixelSize:s,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=e,n=(0,Ne.g)(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),r=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((e=>e.data&&e.data.slices)).catch((()=>null)):null,s=await Promise.all([n,r]);return this._slices=s[1],s[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;t.xmin>-1&&t.xmax>181&&i?.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new Ze.Z,e.extent=e.transform.forwardTransform(t))}_computeMinMaxLOD(e,t){const{pixelSize:i}=e,n=.5/e.width*i.x,{lods:r}=t,s=t.lodAt(Math.max.apply(null,r.map((e=>e.level)))),a=t.lodAt(Math.min.apply(null,r.map((e=>e.level)))),{tileType:o}=this;if("Map"===o)return this._levelOffset=r[0].level,[s,a];if("Raster"===o)return[r.find((e=>e.resolution===i.x))??s,a];const{minScale:l,maxScale:c}=this.sourceJSON;let h=s;c>0&&(h=r.find((e=>Math.abs(e.scale-c)<n)),h||(h=r.filter((e=>e.scale>c)).sort(((e,t)=>e.scale>t.scale?1:-1))[0]??s));let u=a;return l>0&&(u=r.find((e=>Math.abs(e.scale-l)<n))??a,this._levelOffset=u.level-a.level),[h,u]}};(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],He.prototype,"datasetFormat",void 0),(0,n._)([(0,h.Cb)()],He.prototype,"tileType",void 0),He=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.ImageServerRaster")],He);const Le=He;var We=i(32603);const qe=new Map;qe.set("Int8","s8"),qe.set("UInt8","u8"),qe.set("Int16","s16"),qe.set("UInt16","u16"),qe.set("Int32","s32"),qe.set("UInt32","u32"),qe.set("Float32","f32"),qe.set("Float64","f32"),qe.set("Double64","f32");const Ge=new Map;Ge.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Ge.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Ge.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Ge.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let je=class extends j{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?e.signal:null,i=await this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:n,files:r}=this._parseHeader(i.data);if(-1===this.ioConfig.skipExtensions?.indexOf("aux.xml")){const t=await this._fetchAuxiliaryData(e);null!=t&&(n.statistics=t.statistics??n.statistics,n.histograms=t.histograms,t.histograms&&null==n.statistics&&(n.statistics=(0,Q.Oh)(t.histograms)))}this._set("rasterInfo",n),this._files=r;const s=await this.request(r.index,{responseType:"array-buffer",signal:t});this._storageIndex=this._parseIndex(s.data);const{blockWidth:a,blockHeight:o}=this.rasterInfo.storageInfo,l=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:c,height:h}=this.rasterInfo,u=[],f=this._getBandSegmentCount();let d=0,m=-1;for(;d<this._storageIndex.length;){m++;const e=Math.ceil(c/a/l**m)-1,t=Math.ceil(h/o/l**m)-1;d+=(e+1)*(t+1)*f*4,u.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=u,m>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=m),this.updateTileInfo()}async fetchRawTile(e,t,i,n={}){const{blockWidth:r,blockHeight:s,blockBoundary:a}=this.rasterInfo.storageInfo,o=a[e];if(!o||o.maxRow<t||o.maxCol<i||o.minRow>t||o.minCol>i)return null;const{bandCount:l,pixelType:c}=this.rasterInfo,{ranges:h,actualTileWidth:u,actualTileHeight:f}=this._getTileLocation(e,t,i);if(!h||0===h.length)return null;if(0===h[0].from&&0===h[0].to){const e=new Uint8Array(r*s);return new X.Z({width:r,height:s,pixels:null,mask:e,validPixelCount:0})}const{bandIds:d}=this.ioConfig,m=this._getBandSegmentCount(),p=[];let y=0;for(y=0;y<m;y++)d&&!d.includes(y)||p.push(this.request(this._files.data,{range:{from:h[y].from,to:h[y].to},responseType:"array-buffer",signal:n.signal}));const g=await Promise.all(p),x=g.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),w=new Uint8Array(x);let b=0;for(y=0;y<m;y++)w.set(new Uint8Array(g[y].data),b),b+=g[y].data.byteLength;const I=Ge.get(this.rasterInfo.storageInfo.compression).decoderFormat,v=await this.decodePixelBlock(w.buffer,{width:r,height:s,format:I,planes:d?.length||l,pixelType:c});if(null==v)return null;let{noDataValue:_}=this.rasterInfo;if(null!=_&&"lerc"!==I&&!v.mask&&(_=_[0],null!=_)){const e=v.width*v.height,t=new Uint8Array(e);if(Math.abs(_)>1e24)for(y=0;y<e;y++)Math.abs((v.pixels[0][y]-_)/_)>1e-6&&(t[y]=1);else for(y=0;y<e;y++)v.pixels[0][y]!==_&&(t[y]=1);v.mask=t}let S=0,R=0;if(u!==r||f!==s){let e=v.mask;if(e)for(y=0;y<s;y++)if(R=y*r,y<f)for(S=u;S<r;S++)e[R+S]=0;else for(S=0;S<r;S++)e[R+S]=0;else for(e=new Uint8Array(r*s),v.mask=e,y=0;y<f;y++)for(R=y*r,S=0;S<u;S++)e[R+S]=1}return v}_parseIndex(e){if(e.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let t,i,n,r,s,a;if(We.f){for(i=new Uint8Array(e),r=new ArrayBuffer(e.byteLength),n=new Uint8Array(r),s=0;s<e.byteLength/4;s++)for(a=0;a<4;a++)n[4*s+a]=i[4*s+3-a];t=new Uint32Array(r)}else t=new Uint32Array(e);return t}_getBandSegmentCount(){return Ge.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,i){const{blockWidth:n,blockHeight:r,pyramidScalingFactor:s}=this.rasterInfo.storageInfo,{width:a,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let c,h,u,f=0,d=0;for(u=0;u<e;u++)d=s**u,c=Math.ceil(a/n/d),h=Math.ceil(o/r/d),f+=c*h;d=s**e,c=Math.ceil(a/n/d),h=Math.ceil(o/r/d),f+=t*c+i,f*=4*l;const m=this._storageIndex.subarray(f,f+4*l);let p=0,y=0;const g=[];for(let e=0;e<l;e++)p=m[4*e]*2**32+m[4*e+1],y=p+m[4*e+2]*2**32+m[4*e+3],g.push({from:p,to:y});return{ranges:g,actualTileWidth:i<c-1?n:Math.ceil(a/d)-n*(c-1),actualTileHeight:t<h-1?r:Math.ceil(o/d)-r*(h-1)}}_parseHeader(e){const t=Re(e,"MRF_META/Raster");if(!t)throw new s.Z("mrf:open","not a valid MRF format");const i=Re(t,"Size"),n=parseInt(i.getAttribute("x"),10),r=parseInt(i.getAttribute("y"),10),a=parseInt(i.getAttribute("c"),10),o=(Te(t,"Compression")||"none").toLowerCase();if(!Ge.has(o))throw new s.Z("mrf:open","currently does not support compression "+o);const l=Te(t,"DataType")||"UInt8",c=qe.get(l);if(null==c)throw new s.Z("mrf:open","currently does not support pixel type "+l);const h=Re(t,"PageSize"),u=parseInt(h.getAttribute("x"),10),f=parseInt(h.getAttribute("y"),10),d=Re(t,"DataValues");let m,p;if(d&&(p=d.getAttribute("NoData"),null!=p&&(m=p.trim().split(" ").map((e=>parseFloat(e))))),Re(e,"MRF_META/CachedSource"))throw new s.Z("mrf:open","currently does not support MRF referencing other data files");const y=Re(e,"MRF_META/GeoTags"),g=Re(y,"BoundingBox");let x,w=!1;if(null!=g){const e=parseFloat(g.getAttribute("minx")),t=parseFloat(g.getAttribute("miny")),i=parseFloat(g.getAttribute("maxx")),n=parseFloat(g.getAttribute("maxy")),r=Te(y,"Projection")||"";let s=re.Z.WGS84;if("LOCAL_CS[]"!==r)if(r.toLowerCase().startsWith("epsg:")){const e=Number(r.slice(5));isNaN(e)||0===e||(s=new re.Z({wkid:e}))}else s=Oe(r)??re.Z.WGS84;else w=!0,s=new re.Z({wkid:3857});x=new W.Z(e,t,i,n),x.spatialReference=s}else w=!0,x=new W.Z({xmin:-.5,ymin:.5-r,xmax:n-.5,ymax:.5,spatialReference:new re.Z({wkid:3857})});const b=Re(e,"MRF_META/Rsets"),I=parseInt(b&&b.getAttribute("scale")||"2",10),v=x.spatialReference,_=new z.Z({origin:new q.Z({x:x.xmin,y:x.ymax,spatialReference:v}),blockWidth:u,blockHeight:f,pyramidBlockWidth:u,pyramidBlockHeight:f,compression:o,pyramidScalingFactor:I}),S=new q.Z({x:x.width/n,y:x.height/r,spatialReference:v}),R=new me.Z({width:n,height:r,extent:x,isPseudoSpatialReference:w,spatialReference:v,bandCount:a,pixelType:c,pixelSize:S,noDataValue:m,storageInfo:_}),T=Te(e,"datafile"),C=Te(e,"IndexFile");return{rasterInfo:R,files:{mrf:this.url,index:C||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",Ge.get(o).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Be(t)}catch{return null}}};(0,n._)([(0,h.Cb)()],je.prototype,"_files",void 0),(0,n._)([(0,h.Cb)()],je.prototype,"_storageIndex",void 0),(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],je.prototype,"datasetFormat",void 0),je=(0,n._)([(0,p.j)("esri.layers.support.rasterIO.MRFRaster")],je);const Ue=je;var $e=i(19880),Ve=i(11139);const Ye=(e,t)=>e.get(t)?.values,Xe=(e,t)=>e.get(t)?.values?.[0];let Ke=class extends j{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){await this.init();const t=e?e.signal:null,{data:i}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!i)throw new s.Z("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:n,firstIFDPos:r,isBigTiff:a}=(0,$e.cK)(i),o=[];await this._readIFDs(o,i,n,r,0,a?8:4,t);const{imageInfo:l,rasterInfo:c}=this._parseIFDs(o),h=(0,$e.ee)(o),u=(0,$e.I7)(o);if(this._headerInfo={littleEndian:n,isBigTiff:a,ifds:o,pyramidIFDs:h,maskIFDs:u,...l},this._set("rasterInfo",c),!l.isSupported)throw new s.Z("tiffraster:open","this tiff is not supported: "+l.message);if(!l.tileWidth)throw new s.Z("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const f=o[0].get("PREDICTOR")?.values?.[0],d=o[0].get("SAMPLEFORMAT")?.values?.[0];if(3===d&&2===f)throw new s.Z("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floatting point data");const{skipExtensions:m=[]}=this.ioConfig;if(!m.includes("aux.xml")){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&this._processPAMInfo(t,c)}m.includes("vat.dbf")||1!==c.bandCount||"u8"!==c.pixelType||(c.attributeTable=await this._fetchAuxiliaryTable(e),null!=c.attributeTable&&(c.keyProperties.DataType="thematic")),this.updateTileInfo()}async fetchRawTile(e,t,i,n={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,i))return null;const r=await this._fetchRawTiffTile(e,t,i,!1,n);if(null!=r&&this._headerInfo.hasMaskBand){const s=await this._fetchRawTiffTile(e,t,i,!0,n);null!=s&&s.pixels[0]instanceof Uint8Array&&(r.mask=s.pixels[0])}return r}_parseIFDs(e){const t=(0,$e.FI)(e),{width:i,height:n,tileWidth:r,tileHeight:s,planes:a,pixelType:o,compression:l,firstPyramidLevel:c,maximumPyramidLevel:h,pyramidBlockWidth:u,pyramidBlockHeight:f,tileBoundary:d,affine:m,metadata:p}=t;let y=Oe(t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid),g=!!t.isPseudoGeographic;null==y&&(g=!0,y=new re.Z({wkid:3857}));const x=new W.Z({...t.extent,spatialReference:y}),w=new q.Z(x?{x:x.xmin,y:x.ymax,spatialReference:y}:{x:0,y:0}),b=new z.Z({blockWidth:r,blockHeight:s,pyramidBlockWidth:u,pyramidBlockHeight:f,compression:l,origin:w,firstPyramidLevel:c,maximumPyramidLevel:h,blockBoundary:d}),I=new q.Z({x:(x.xmax-x.xmin)/i,y:(x.ymax-x.ymin)/n,spatialReference:y}),v=p?{BandProperties:p.bandProperties,DataType:p.dataType}:{};let _=null;const S=Xe(e[0],"PHOTOMETRICINTERPRETATION"),R=Ye(e[0],"COLORMAP");if(S<=3&&R?.length>3&&R.length%3==0){_=[];const e=R.length/3;for(let t=0;t<e;t++)_.push([t,R[t]>>>8,R[t+e]>>>8,R[t+2*e]>>>8])}const T=new me.Z({width:i,height:n,bandCount:a,pixelType:o,pixelSize:I,storageInfo:b,spatialReference:y,isPseudoSpatialReference:g,keyProperties:v,extent:x,colormap:_,statistics:p?p.statistics:null});return m?.length&&(T.nativeExtent=new W.Z({xmin:-.5,ymin:.5-n,xmax:i-.5,ymax:.5,spatialReference:y}),T.transform=new Fe.Z({polynomialOrder:1,forwardCoefficients:[m[2]+m[0]/2,m[5]-m[3]/2,m[0],m[3],-m[1],-m[4]]}),T.extent=T.transform.forwardTransform(T.nativeExtent),T.pixelSize=new q.Z({x:(x.xmax-x.xmin)/i,y:(x.ymax-x.ymin)/n,spatialReference:y}),b.origin.x=-.5,b.origin.y=.5),{imageInfo:t,rasterInfo:T}}_processPAMInfo(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&null==t.statistics&&(t.statistics=(0,Q.Oh)(e.histograms)),e.transform&&null==t.transform){t.transform=e.transform,t.nativeExtent=t.extent;const i=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new q.Z({x:(i.xmax-i.xmin)/t.width,y:(i.ymax-i.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=i}t.isPseudoSpatialReference&&e.spatialReference&&(t.spatialReference=e.spatialReference,t.extent.spatialReference=t.nativeExtent.spatialReference=t.storageInfo.origin.spatialReference=t.spatialReference)}async _readIFDs(e,t,i,n,r,s=4,a){if(!n)return null;(n>=t.byteLength||n<0)&&(t=(await this.request(this.url,{range:{from:n+r,to:n+r+this._bufferSize},responseType:"array-buffer",signal:a})).data,r=n+r,n=0);const o=await this._readIFD(t,i,n,r,Ve.Z.TIFF_TAGS,s,a);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,t,i,o.nextIFD-r,r,s,a)}async _readIFD(e,t,i,n,r=Ve.Z.TIFF_TAGS,s=4,a){if(!e)return null;const o=(0,$e.vr)(e,t,i,n,r,s);if(o.success){const i=[];if(o.ifd?.forEach((e=>{e.values||i.push(e)})),i.length>0){const r=i.map((e=>e.offlineOffsetSize)).filter(f.pC),s=Math.min.apply(null,r.map((e=>e[0])));if(Math.min.apply(null,r.map((e=>e[0]+e[1])))-s<=this._bufferSize){const{data:r}=await this.request(this.url,{range:{from:s,to:s+this._bufferSize},responseType:"array-buffer",signal:a});e=r,n=s,i.forEach((i=>(0,$e.Dq)(e,t,i,n)))}}if(o.ifd?.has("GEOKEYDIRECTORY")){const i=o.ifd.get("GEOKEYDIRECTORY"),r=i?.values;if(r&&r.length>4){const s=r[0]+"."+r[1]+"."+r[2],o=await this._readIFD(e,t,i.valueOffset+6-n,n,Ve.Z.GEO_KEYS,2,a);i.data=o.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[s]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==e.byteLength){const i=await this.request(this.url,{range:{from:n,to:n+o.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=i.data).byteLength<o.requiredBufferSize?null:this._readIFD(e,t,0,n,Ve.Z.TIFF_TAGS,4,a)}}async _fetchRawTiffTile(e,t,i,n,r={}){const s=this._getTileLocation(e,t,i,n);if(!s)return null;const{ranges:a,actualTileWidth:o,actualTileHeight:l,ifd:c}=s,h=a.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:r.signal}))),u=await Promise.all(h),f=u.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),d=1===u.length?u[0].data:new ArrayBuffer(f),m=[0],p=[0];if(u.length>1){const e=new Uint8Array(d);for(let t=0,i=0;t<u.length;t++){const n=u[t].data;e.set(new Uint8Array(n),i),m[t]=i,i+=n.byteLength,p[t]=n.byteLength}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),x=await this.decodePixelBlock(d,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:m,sizes:p},width:y,height:g,planes:null,pixelType:null});if(null==x)return null;let w,b,I;if(o!==y||l!==g){let e=x.mask;if(e)for(w=0;w<g;w++)if(I=w*y,w<l)for(b=o;b<y;b++)e[I+b]=0;else for(b=0;b<y;b++)e[I+b]=0;else for(e=new Uint8Array(y*g),x.mask=e,w=0;w<l;w++)for(I=w*y,b=0;b<o;b++)e[I+b]=1}return x}_getTileLocation(e,t,i,n=!1){const{firstPyramidLevel:r,blockBoundary:s}=this.rasterInfo.storageInfo,a=0===e?0:e-(r-1),{_headerInfo:o}=this;if(!o)return null;const l=n?o.maskIFDs[a]:0===a?o?.ifds[0]:o?.pyramidIFDs[a-1];if(!l)return null;const c=(0,$e.If)(l,o),h=Ye(l,"TILEOFFSETS");if(void 0===h)return null;const u=Ye(l,"TILEBYTECOUNTS"),{minRow:f,minCol:d,maxRow:m,maxCol:p}=s[a];if(t>m||i>p||t<f||i<d)return null;const y=Xe(l,"IMAGEWIDTH"),g=Xe(l,"IMAGELENGTH"),x=Xe(l,"TILEWIDTH"),w=Xe(l,"TILELENGTH"),b=[];if(c){const{bandCount:e}=this.rasterInfo;for(let n=0;n<e;n++){const e=n*(m+1)*(p+1)+t*(p+1)+i;b[n]={from:h[e],to:h[e]+u[e]-1}}}else{const e=t*(p+1)+i;b.push({from:h[e],to:h[e]+u[e]-1})}for(let e=0;e<b.length;e++)if(null==b[e].from||!b[e].to)return null;return{ranges:b,ifd:l,actualTileWidth:i===p&&y%x||x,actualTileHeight:t===m&&g%w||w}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Be(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),i=ge.parse(t);return i?.recordSet?U.Z.fromJSON(i.recordSet):null}catch{return null}}};(0,n._)([(0,h.Cb)()],Ke.prototype,"_files",void 0),(0,n._)([(0,h.Cb)()],Ke.prototype,"_headerInfo",void 0),(0,n._)([(0,h.Cb)()],Ke.prototype,"_bufferSize",void 0),(0,n._)([(0,h.Cb)({type:String,json:{write:!0}})],Ke.prototype,"datasetFormat",void 0),Ke=(0,n._)([(0,p.j)("esri.layers.support.rasterDatasets.TIFFRaster")],Ke);const Qe=Ke,et=new Map;et.set("CRF",{desc:"Cloud Raster Format",constructor:Ie}),et.set("MRF",{desc:"Meta Raster Format",constructor:Ue}),et.set("TIFF",{desc:"GeoTIFF",constructor:Qe}),et.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Le}),et.set("JPG",{desc:"JPG Raster Format",constructor:Ae}),et.set("PNG",{desc:"PNG Raster Format",constructor:Ae}),et.set("GIF",{desc:"GIF Raster Format",constructor:Ae}),et.set("BMP",{desc:"BMP Raster Format",constructor:Ae});class tt{static get supportedFormats(){const e=new Set;return et.forEach(((t,i)=>e.add(i))),e}static async open(e){const{url:t,ioConfig:i,sourceJSON:n}=e;let r=e.datasetFormat;null==r&&t.lastIndexOf(".")&&(r=t.slice(t.lastIndexOf(".")+1).toUpperCase()),"OVR"===r||"TIF"===r?r="TIFF":"JPG"!==r&&"JPEG"!==r&&"JFIF"!==r||(r="JPG"),t.toLowerCase().includes("/imageserver")&&!t.toLowerCase().includes("/wcsserver")&&(r="RasterTileServer");const a={url:t,sourceJSON:n,datasetFormat:r,ioConfig:i??{bandIds:null,sampling:null}};let o,l;if(r&&this.supportedFormats.has(r)){if("CRF"===r&&!i?.enableCRF)throw new s.Z("rasterfactory:open",`cannot open raster: ${t}`);return o=et.get(r).constructor,l=new o(a),await l.open({signal:e.signal}),l}if(r)throw new s.Z("rasterfactory:open","not a supported format "+r);const c=Array.from(et.keys());let h=0;const u=()=>(r=c[h++],r&&("CRF"!==r||i?.enableCRF)?(o=et.get(r).constructor,l=new o(a),l.open({signal:e.signal}).then((()=>l)).catch((()=>u()))):null);return u()}static register(e,t,i){et.has(e.toUpperCase())||et.set(e.toUpperCase(),{desc:t,constructor:i})}}var it=i(10171);let nt=class extends((0,x.h)((0,he.M)((0,oe.q)((0,le.I)((0,w.N)(ae((0,ue.n)((0,g.Y)((0,ce.Q)((0,o.R)(y.Z))))))))))){constructor(...e){super(...e),this._primaryRasters=[],this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(l.r9).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const e=[new fe.Z({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new fe.Z({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],{rasterInfo:t}=this,i=t?.attributeTable,n=null!=i?i.fields:null;if(n){const t=n.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));e.push(...t)}const r=t?.dataType,s=t?.multidimensionalInfo;if(("vector-magdir"===r||"vector-uv"===r)&&null!=s){const t=s.variables[0].unit?.trim(),i="Magnitude"+(t?` (${t})`:"");e.push(new fe.Z({name:"Raster.Magnitude",alias:i,domain:null,editable:!1,type:"double"})),e.push(new fe.Z({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return e}createPopupTemplate(e){const{rasterFields:t}=this,i=new Set(t.map((({name:e})=>e)).filter((e=>"raster.servicepixelvalue.raw"!==e.toLowerCase())));return(0,it.eZ)({fields:t,title:this.title},{...e,visibleFieldNames:i})}async generateRasterInfo(e,t){if(!(e=(0,u.TJ)(k.Z,e)))return this.rasterInfo;try{const i={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((e=>i[e.url]=e));const n=(0,K.Ue)(e.functionDefinition?.toJSON()??e.toJSON(),i),r=new V({rasterFunction:n});return await r.open(t),r.rasterInfo}catch(e){if(e instanceof s.Z)throw e;throw new s.Z("imagery-tile-layer","the given raster function is not supported")}}write(e,t){const i=this._primaryRasters[0]??this.raster;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new s.Z("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){let t=!1;if(this.raster)this.raster.rasterInfo||await this.raster.open(),"Function"===this.raster.datasetFormat?(t=!0,this._primaryRasters=this.raster.primaryRasters.rasters):this._primaryRasters=[this.raster],this.url=this.raster.url;else{const{rasterFunction:t}=this,i=[this.url];t&&(0,K.G8)(t.toJSON(),i);const n=await Promise.all(i.map((t=>tt.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e})))),r=n.findIndex((e=>null==e));if(r>-1)throw new s.Z("imagery-tile-layer:open",`cannot open raster: ${i[r]}`);if(this._primaryRasters=n,t){const e={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((t=>e[t.url]=t));const i=(0,K.Ue)(t.functionDefinition?.toJSON()??t.toJSON(),e),r=new V({rasterFunction:i});try{await r.open(),this.raster=r}catch(e){const t=a.Z.getLogger(this);e instanceof s.Z&&t.error("imagery-tile-layer:open",e.message),t.warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=n[0]}}else this.raster=n[0]}const i=this.raster.rasterInfo;if(!i)throw new s.Z("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("rasterInfo",t?i:this._primaryRasters[0].rasterInfo),this._set("spatialReference",i.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}else this.read({tileInfo:this.rasterInfo.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles((0,c.YP)((()=>this.customParameters),(e=>{this.raster&&(this.raster.ioConfig.customFetchParameters=e)})))}};(0,n._)([(0,h.Cb)()],nt.prototype,"_primaryRasters",void 0),(0,n._)([(0,h.Cb)({type:[u.z8],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],nt.prototype,"bandIds",void 0),(0,n._)([(0,h.Cb)({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),(0,m.J)(de.cl)],nt.prototype,"interpolation",void 0),(0,n._)([(0,h.Cb)(R.rn)],nt.prototype,"legendEnabled",void 0),(0,n._)([(0,h.Cb)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],nt.prototype,"isReference",void 0),(0,n._)([(0,h.Cb)({type:["show","hide"]})],nt.prototype,"listMode",void 0),(0,n._)([(0,h.Cb)({json:{read:!0,write:!0}})],nt.prototype,"blendMode",void 0),(0,n._)([(0,h.Cb)()],nt.prototype,"sourceJSON",void 0),(0,n._)([(0,h.Cb)({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],nt.prototype,"version",void 0),(0,n._)([(0,h.Cb)({readOnly:!0,json:{read:!1}})],nt.prototype,"type",void 0),(0,n._)([(0,h.Cb)({type:["ArcGISTiledImageServiceLayer"]})],nt.prototype,"operationalLayerType",void 0),(0,n._)([(0,h.Cb)({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,i){t[i]=!e}}}})],nt.prototype,"popupEnabled",void 0),(0,n._)([(0,h.Cb)({type:r.Z,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],nt.prototype,"popupTemplate",void 0),(0,n._)([(0,h.Cb)({readOnly:!0})],nt.prototype,"defaultPopupTemplate",null),(0,n._)([(0,h.Cb)({readOnly:!0,type:[fe.Z]})],nt.prototype,"fields",void 0),(0,n._)([(0,h.Cb)({readOnly:!0,type:[fe.Z]})],nt.prototype,"rasterFields",null),nt=(0,n._)([(0,p.j)("esri.layers.ImageryTileLayer")],nt);const rt=nt},43550:(e,t,i)=>{i.d(t,{y:()=>S});var n,r=i(36663),s=i(66341),a=i(74396),o=i(25015),l=i(70375),c=i(23148),h=i(55854),u=i(17135),f=i(78668),d=i(76868),m=i(17262),p=i(3466),y=i(81977),g=(i(7283),i(7753)),x=(i(39994),i(40266)),w=i(23758),b=i(67134),I=i(86098);class v{constructor(e){this._validateJSON(e);const{location:t,data:i}=e;this.location=Object.freeze((0,b.d9)(t));const n=this.location.width,r=this.location.height;let s=!0,a=!0;const o=function(e,t=!1){return e<=I.DB?t?new Array(e).fill(0):new Array(e):new Uint32Array(e)}(Math.ceil(n*r/32));let l=0;for(let e=0;e<i.length;e++){const t=e%32;i[e]?(a=!1,o[l]|=1<<t):s=!1,31===t&&++l}a?(this._availability="unavailable",this.byteSize=40):s?(this._availability="available",this.byteSize=40):(this._availability=o,this.byteSize=40+(0,I.Xw)(o))}getAvailability(e,t){if("unavailable"===this._availability||"available"===this._availability)return this._availability;const i=(e-this.location.top)*this.location.width+(t-this.location.left),n=i%32,r=i>>5,s=this._availability;return r<0||r>s.length?"unknown":s[r]&1<<n?"available":"unavailable"}static fromDefinition(e,t){const i=e.service.request||s.default,{row:n,col:r,width:a,height:o}=e,c={query:{f:"json"}};return t=t?{...c,...t}:c,i(function(e){let t;if(e.service.tileServers?.length){const i=e.service.tileServers;t=`${i&&i.length?i[e.row%i.length]:e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}else t=`${e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`;const i=e.service.query;return i&&(t=`${t}?${i}`),t}(e),t).then((e=>e.data)).catch((e=>{if(e&&e.details&&422===e.details.httpStatus)return{location:{top:n,left:r,width:a,height:o},valid:!0,data:(0,g.a9)(a*o,0)};throw e})).then((e=>{if(e.location&&(e.location.top!==n||e.location.left!==r||e.location.width!==a||e.location.height!==o))throw new l.Z("tilemap:location-mismatch","Tilemap response for different location than requested",{response:e,definition:{top:n,left:r,width:a,height:o}});return v.fromJSON(e)}))}static fromJSON(e){return Object.freeze(new v(e))}_validateJSON(e){if(!e||!e.location)throw new l.Z("tilemap:missing-location","Location missing from tilemap response");if(!1===e.valid)throw new l.Z("tilemap:invalid","Tilemap response was marked as invalid");if(!e.data)throw new l.Z("tilemap:missing-data","Data missing from tilemap response");if(!Array.isArray(e.data))throw new l.Z("tilemap:data-mismatch","Data must be an array of numbers");if(e.data.length!==e.location.width*e.location.height)throw new l.Z("tilemap:data-mismatch","Number of data items does not match width/height of tilemap")}}function _(e){return`${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}let S=n=class extends a.Z{constructor(e){super(e),this._pendingTilemapRequests={},this.request=s.default,this.size=32,this._prefetchingEnabled=!0}initialize(){this._tilemapCache=new h.z(2*o.Y.MEGABYTES),this.addHandles([(0,d.YP)((()=>{const{layer:e}=this;return[e?.parsedUrl,e?.tileServers,e?.apiKey,e?.customParameters]}),(()=>this._initializeTilemapDefinition()),d.nn)])}get effectiveMinLOD(){return this.minLOD??this.layer.tileInfo.lods[0].level}get effectiveMaxLOD(){return this.maxLOD??this.layer.tileInfo.lods[this.layer.tileInfo.lods.length-1].level}fetchTilemap(e,t,i,n){if(!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD)return Promise.reject(new l.Z("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`));const r=this._tmpTilemapDefinition,s=this._tilemapFromCache(e,t,i,r);if(s)return Promise.resolve(s);const a=n&&n.signal;return n={...n,signal:null},new Promise(((e,t)=>{(0,f.fu)(a,(()=>t((0,f.zE)())));const i=_(r);let s=this._pendingTilemapRequests[i];if(!s){s=v.fromDefinition(r,n).then((e=>(this._tilemapCache.put(i,e,e.byteSize),e)));const e=()=>delete this._pendingTilemapRequests[i];this._pendingTilemapRequests[i]=s,s.then(e,e)}s.then(e,t)}))}getAvailability(e,t,i){if(!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD)return"unavailable";const n=this._tilemapFromCache(e,t,i,this._tmpTilemapDefinition);return n?n.getAvailability(t,i):"unknown"}fetchAvailability(e,t,i,n){return!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD?Promise.reject(new l.Z("tile-map:tile-unavailable","Tile is not available",{level:e,row:t,col:i})):this.fetchTilemap(e,t,i,n).catch((e=>e)).then((n=>{if(n instanceof v){const r=n.getAvailability(t,i);if("unavailable"===r)throw new l.Z("tile-map:tile-unavailable","Tile is not available",{level:e,row:t,col:i});return r}if((0,f.D_)(n))throw n;return"unknown"}))}fetchAvailabilityUpsample(e,t,i,n,r){n.level=e,n.row=t,n.col=i;const s=this.layer.tileInfo;s.updateTileInfo(n);const a=this.fetchAvailability(e,t,i,r).catch((e=>{if((0,f.D_)(e))throw e;if(s.upsampleTile(n))return this.fetchAvailabilityUpsample(n.level,n.row,n.col,n,r);throw e}));return this._fetchAvailabilityUpsamplePrefetch(n.id,e,t,i,r,a),a}async _fetchAvailabilityUpsamplePrefetch(e,t,i,r,s,a){if(!this._prefetchingEnabled||null==e)return;const o=`prefetch-${e}`;if(this.hasHandles(o))return;const l=new AbortController;a.then((()=>l.abort()),(()=>l.abort()));let h=!1;const u=(0,c.kB)((()=>{h||(h=!0,l.abort())}));if(this.addHandles(u,o),await(0,m.MU)(10,l.signal).catch((()=>{})),h||(h=!0,this.removeHandles(o)),(0,f.Hc)(l))return;const d=new w.f(e,t,i,r),p={...s,signal:l.signal},y=this.layer.tileInfo;for(let e=0;n._prefetches.length<n._maxPrefetch&&y.upsampleTile(d);++e){const e=this.fetchAvailability(d.level,d.row,d.col,p);n._prefetches.push(e);const t=()=>{n._prefetches.removeUnordered(e)};e.then(t,t)}}_initializeTilemapDefinition(){if(!this.layer.parsedUrl)return;const{parsedUrl:e,apiKey:t,customParameters:i}=this.layer;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:e.path,query:(0,p.B7)({...e.query,...i,token:t??e.query?.token}),tileServers:this.layer.tileServers,request:this.request},width:this.size,height:this.size,level:0,row:0,col:0}}_tilemapFromCache(e,t,i,n){n.level=e,n.row=t-t%this.size,n.col=i-i%this.size;const r=_(n);return this._tilemapCache.get(r)}get test(){const e=this;return{get prefetchingEnabled(){return e._prefetchingEnabled},set prefetchingEnabled(t){e._prefetchingEnabled=t},hasTilemap:(t,i,n)=>!!e._tilemapFromCache(t,i,n,e._tmpTilemapDefinition)}}};S._maxPrefetch=4,S._prefetches=new u.Z({initialSize:n._maxPrefetch}),(0,r._)([(0,y.Cb)({constructOnly:!0})],S.prototype,"layer",void 0),(0,r._)([(0,y.Cb)({constructOnly:!0})],S.prototype,"minLOD",void 0),(0,r._)([(0,y.Cb)({constructOnly:!0})],S.prototype,"maxLOD",void 0),(0,r._)([(0,y.Cb)({constructOnly:!0})],S.prototype,"request",void 0),(0,r._)([(0,y.Cb)({constructOnly:!0})],S.prototype,"size",void 0),S=n=(0,r._)([(0,x.j)("esri.layers.support.TilemapCache")],S)},45389:(e,t,i)=>{i.d(t,{OE:()=>h,Gc:()=>d,Qg:()=>u,Rq:()=>o,gX:()=>f,z2:()=>l,ET:()=>c,Vx:()=>p}),i(91957);var n=i(18486),r=i(67666);const s=new Map,a=new class{constructor(e=15e3,t=5e3){this._timer=null,this._cachedBlocks=new Map,this._size=-1,this._duration=e,this._interval=Math.min(e,t)}decreaseRefCount(e,t){const i=e+"/"+t,n=this._cachedBlocks;if(n.has(i)){const e=n.get(i);return e.refCount--,e.refCount<=0&&(n.delete(i),e.controller&&e.controller.abort()),e.refCount}return 0}getBlock(e,t){const i=e+"/"+t,n=this._cachedBlocks;if(n.has(i)){const e=n.get(i);return e.ts=Date.now(),e.refCount++,n.delete(i),n.set(i,e),e.block}return null}putBlock(e,t,i,n){const r=this._cachedBlocks,s=e+"/"+t;if(r.has(s)){const e=r.get(s);e.ts=Date.now(),e.refCount++}else r.set(s,{block:i,ts:Date.now(),refCount:1,controller:n});this._trim(),this._updateTimer()}deleteBlock(e,t){const i=this._cachedBlocks,n=e+"/"+t;i.has(n)&&i.delete(n)}updateMaxSize(e){this._size=e,this._trim()}empty(){this._cachedBlocks.clear(),this._clearTimer()}getCurrentSize(){return this._cachedBlocks.size}_updateTimer(){if(null!=this._timer)return;const e=this._cachedBlocks;this._timer=setInterval((()=>{const t=Array.from(e),i=Date.now();for(let n=0;n<t.length&&t[n][1].ts<=i-this._duration;n++)e.delete(t[n][0]);0===e.size&&this._clearTimer()}),this._interval)}_trim(){const e=this._cachedBlocks;if(-1===this._size||this._size>=e.size)return;const t=Array.from(e);for(let i=0;i<t.length-this._size;i++)e.delete(t[i][0])}_clearTimer(){null!=this._timer&&(clearInterval(this._timer),this._timer=null)}};function o(e,t){return null==t?e:`${e}?sliceId=${t}`}function l(e,t){const i={extent:null,rasterInfo:t,cache:new Map},n=s.get(e);return n?(n.push(i),n.length-1):(s.set(e,[i]),0)}function c(e,t){const i=s.get(e);i&&(i[t]=null,i.some((e=>null!=e))||s.delete(e))}function h(e,t,i){const n=s.get(e);if(!n)return null==t?a.decreaseRefCount(e,i):0;if(null==t||null==n[t])return a.decreaseRefCount(e,i);const r=n[t]?.cache,o=r?.get(i);if(r&&o){if(o.refCount--,0===o.refCount){r.delete(i);for(let e=0;e<n.length;e++)n[e]?.cache.delete(i);o.controller&&o.controller.abort()}return o.refCount}return 0}function u(e,t,i){const n=s.get(e);if(!n)return null==t?a.getBlock(e,i):null;if(null==t||null==n[t]){for(let e=0;e<n.length;e++){const t=n[e]?.cache.get(i);if(t)return t.refCount++,t.block}return a.getBlock(e,i)}const r=n[t]?.cache.get(i);if(r)return r.refCount++,r.block;for(let e=0;e<n.length;e++){if(e===t||!n[e])continue;const r=n[e]?.cache,s=r?.get(i);if(r&&s)return s.refCount++,r.set(i,s),s.block}return null}function f(e,t,i,n,r=null){const o=s.get(e);if(!o)return void(null==t&&a.putBlock(e,i,n,r));if(null==t||null==o[t])return void a.putBlock(e,i,n,r);const l={refCount:1,block:n,isResolved:!1,isRejected:!1,controller:r};n.then((()=>l.isResolved=!0)).catch((()=>l.isRejected=!0)),o[t]?.cache.set(i,l)}function d(e,t,i){const n=s.get(e);n?null!=t&&null!=n[t]?n[t]?.cache.delete(i):a.deleteBlock(e,i):null==t&&a.deleteBlock(e,i)}function m(e,t){const i=s.get(e);return i?i[t]??null:null}function p(e,t,i,s,a,o,l=null){const c=m(e,t);if(!c)return;const h=c.extent,{cache:u,rasterInfo:f}=c;if(h&&h.xmin===i.xmin&&h.xmax===i.xmax&&h.ymin===i.ymin&&h.ymax===i.ymax)return;s=s??0;const d=i.clone().normalize(),{spatialReference:p,transform:y}=f,g=new Set;for(let e=0;e<d.length;e++){const t=d[e];if(t.xmax-t.xmin<=s||t.ymax-t.ymin<=s)continue;let i=(0,n.tB)(t,p,l);null!=y&&(i=y.inverseTransform(i));const c=new r.Z({x:s,y:s,spatialReference:t.spatialReference});if(null==a&&!(a=(0,n.VO)(c,p,t,l)))return;const{pyramidLevel:h,pyramidResolution:u,excessiveReading:m}=(0,n.kr)(a,f,o||"closest");if(m)return;const{storageInfo:x}=f,{origin:w}=x,b={x:Math.max(0,Math.floor((i.xmin-w.x)/u.x)),y:Math.max(0,Math.floor((w.y-i.ymax)/u.y))},I=Math.ceil((i.xmax-i.xmin)/u.x-.1),v=Math.ceil((i.ymax-i.ymin)/u.y-.1),_=h>0?x.pyramidBlockWidth:x.blockWidth,S=h>0?x.pyramidBlockHeight:x.blockHeight,R=1,T=Math.max(0,Math.floor(b.x/_)-R),C=Math.max(0,Math.floor(b.y/S)-R),k=Math.floor((b.x+I-1)/_)+R,M=Math.floor((b.y+v-1)/S)+R;for(let e=C;e<=M;e++)for(let t=T;t<=k;t++)g.add(`${h}/${e}/${t}`)}u.forEach(((e,t)=>{if(!g.has(t)){const e=u.get(t);(null==e||e.isResolved||e.isRejected)&&u.delete(t)}})),c.extent={xmin:i.xmin,ymin:i.ymin,xmax:i.xmax,ymax:i.ymax}}}}]);