"use strict";(self.webpackChunkexb_client=self.webpackChunkexb_client||[]).push([["extensions_widgets_arcgis_analysis_node_modules_arcgis_geoenrichment-components_dist_esm_Heat-fdceae"],{16084:(e,t,s)=>{s.d(t,{l:()=>o,p:()=>a});var r=s(18758),n=(s(59920),s(74903),s(19394),s(84953));function o(e,t,s,r){const n=e.clone(),o=1<<n.level,i=n.col+t,a=n.row+s;return r&&i<0?(n.col=i+o,n.world-=1):i>=o?(n.col=i-o,n.world+=1):n.col=i,n.row=a,n}let i=class extends n.d{initialize(){}destroy(){}get supportsTileUpdates(){return!1}get spatialReference(){const e=this.get("tileStore.tileScheme.spatialReference");return e&&e.toJSON()||null}};(0,r.Z)([(0,r._)({readOnly:!0})],i.prototype,"supportsTileUpdates",null),(0,r.Z)([(0,r._)({constructOnly:!0})],i.prototype,"remoteClient",void 0),(0,r.Z)([(0,r._)({constructOnly:!0})],i.prototype,"service",void 0),(0,r.Z)([(0,r._)()],i.prototype,"spatialReference",null),(0,r.Z)([(0,r._)({constructOnly:!0})],i.prototype,"tileInfo",void 0),(0,r.Z)([(0,r._)({constructOnly:!0})],i.prototype,"tileStore",void 0),i=(0,r.Z)([(0,r.a0)("esri.views.2d.layers.features.processors.BaseProcessor")],i);var a=i},90606:(e,t,s)=>{s.r(t),s.d(t,{default:()=>u});var r=s(18758),n=s(59920),o=s(32612),i=s(58683),a=s(16084);s(82263),s(74903),s(57628),s(19394),s(84953);function l(e,t,s,r){const{blurRadius:n,fieldOffset:o,field:i}=t,a=new Float64Array(s*r),l=function(e){const t=Math.round(3*e),s=2*e*e,r=new Float64Array(2*t+1);for(let n=0;n<=r.length;n++)r[n]=Math.exp(-((n-t)**2)/s)/Math.sqrt(2*Math.PI)*(e/2);return r}(n),d=Math.round(3*n);let c,u=Number.NEGATIVE_INFINITY;const h=function(e,t){return null!=e?"string"==typeof t?t=>-1*+t.readAttribute(e):s=>+s.readAttribute(e)+t:e=>1}(i,o),p=new Set;for(const t of e){const e=t.getCursor();for(;e.next();){const t=e.getObjectId();if(p.has(t))continue;p.add(t);const n=e.readLegacyPointGeometry(),o=128;if(n.x<-o||n.x>=s+o||n.y<-o||n.y>r+o)continue;const i=+h(e),f=Math.round(n.x)-d,y=Math.round(n.y)-d,m=Math.max(0,f),_=Math.max(0,y),w=Math.min(r,Math.round(n.y)+d),T=Math.min(s,Math.round(n.x)+d);for(let e=_;e<w;e++){const t=l[e-y];for(let r=m;r<T;r++){const n=l[r-f];c=a[e*s+r]+=t*n*i,c>u&&(u=c)}}}}return{matrix:a.buffer,max:u}}(()=>{if(!("document"in n.e))return()=>null;const e=document.createElement("canvas"),t=e.getContext("2d");e.height=512,e.width=1})();class d{constructor(e,t){this.offset=e,this.extent=t}}let c=class extends a.p{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(e,t){const s=t.schema.processors[0];"heatmap"===s.type&&(0,o.m)(this._schema,s)&&(e.mesh=!0,this._schema=s)}onTileUpdate(e){for(const t of e.removed)this._tileKeyToFeatureSets.delete(t.key.id)}onTileClear(e){return this._tileKeyToFeatureSets.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:{clear:!0}})}async onTileMessage(e,t,s){this._tileKeyToFeatureSets.has(e.key.id)||this._tileKeyToFeatureSets.set(e.key.id,new Map);const n=this._tileKeyToFeatureSets.get(e.key.id);if((0,r.H)(t.addOrUpdate)&&t.addOrUpdate.hasFeatures&&n.set(t.addOrUpdate.instance,t),t.end){const t=[],n=function(e){const t=e.key,s=new Map,r=256,n=i.o,o=e.tileInfoView.tileInfo.isWrappable;return s.set((0,a.l)(t,-1,-1,o).id,new d([-n,-n],[n-r,n-r,n,n])),s.set((0,a.l)(t,0,-1,o).id,new d([0,-n],[0,n-r,n,n])),s.set((0,a.l)(t,1,-1,o).id,new d([n,-n],[0,n-r,r,n])),s.set((0,a.l)(t,-1,0,o).id,new d([-n,0],[n-r,0,n,n])),s.set((0,a.l)(t,1,0,o).id,new d([n,0],[0,0,r,n])),s.set((0,a.l)(t,-1,1,o).id,new d([-n,n],[n-r,0,n,r])),s.set((0,a.l)(t,0,1,o).id,new d([0,n],[0,0,n,r])),s.set((0,a.l)(t,1,1,o).id,new d([n,n],[0,0,r,r])),s}(e);this._tileKeyToFeatureSets.forEach(((s,o)=>{if(o===e.key.id)s.forEach((e=>(0,r.cW)(e.addOrUpdate,(e=>t.push(e)))));else if(n.has(o)){const e=n.get(o),[i,a]=e.offset;s.forEach((e=>(0,r.cW)(e.addOrUpdate,(e=>{const s=e.transform(i,a,1,1);t.push(s)}))))}}));const o=l(t,this._schema.mesh,512,512),c={tileKey:e.key.id,intensityInfo:o},u=[o.matrix];return this.remoteClient.invoke("tileRenderer.onTileData",c,{...s,transferList:u})}}onTileError(e,t,s){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:e.id,error:t},s)}};c=(0,r.Z)([(0,r.a0)("esri.views.2d.layers.features.processors.HeatmapProcessor")],c);const u=c}}]);