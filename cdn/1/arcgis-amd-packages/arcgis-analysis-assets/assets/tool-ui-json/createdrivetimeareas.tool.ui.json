{
  "toolName": "CreateDriveTimeAreas",
  "version": "0.1.0",
  "rules": [
    {
      "ruleType": "equals",
      "valueA": "$[Data].travelMode.impedanceAttributeName",
      "valueB": "$[Data].travelMode.timeAttributeName",
      "destination": "breakUnits",
      "effectParams": {
        "choiceList": ["Minutes", "Seconds", "Hours"],
        "choiceListLabels": { "Minutes": "$minutes", "Seconds": "$seconds", "Hours": "$hours" },
        "defaultValue": "Minutes"
      }
    },
    {
      "ruleType": "expression",
      "expression": "($[Data].travelMode.impedanceAttributeName = $[Data].travelMode.distanceAttributeName)",
      "destination": "breakUnits",
      "effectParams": {
        "choiceList": ["Miles", "Feet", "Yards", "Kilometers", "Meters"],
        "choiceListLabels": {
          "Miles": "$miles",
          "Kilometers": "$kilometers",
          "Meters": "$meters",
          "Feet": "$feet",
          "Yards": "$yards"
        },
        "defaultValue": "Miles"
      }
    },
    {
      "ruleType": "expression",
      "expression": "($[Data].travelMode.impedanceAttributeName = $[Data].travelMode.distanceAttributeName) AND ($[Data].userSettings.unitSystem = 'english')",
      "destination": "breakUnits",
      "effectParams": {
        "choiceList": ["Miles", "Feet", "Yards", "Kilometers", "Meters"],
        "choiceListLabels": {
          "Miles": "$miles",
          "Kilometers": "$kilometers",
          "Meters": "$meters",
          "Feet": "$feet",
          "Yards": "$yards"
        },
        "defaultValue": "Miles"
      }
    },
    {
      "ruleType": "expression",
      "expression": "($[Data].travelMode.impedanceAttributeName = $[Data].travelMode.distanceAttributeName) AND ($[Data].userSettings.unitSystem = 'metric')",
      "destination": "breakUnits",
      "effectParams": {
        "choiceList": ["Kilometers", "Meters", "Miles", "Feet", "Yards"],
        "choiceListLabels": {
          "Miles": "$miles",
          "Kilometers": "$kilometers",
          "Meters": "$meters",
          "Feet": "$feet",
          "Yards": "$yards"
        },
        "defaultValue": "Kilometers"
      }
    },
    {
      "ruleType": "expression",
      "expression": "($[Data].travelMode.impedanceAttributeName NOT $[Data].travelMode.timeAttributeName) AND ($[Data].travelMode.impedanceAttributeName NOT null)",
      "destination": "timeOfDay",
      "effectParams": {
        "visible": false
      }
    },
    {
      "ruleType": "equals",
      "valueA": "$[Data].travelDirection",
      "valueB": "AwayFromFacility",
      "destination": "timeOfDay",
      "effectParams": {
        "label": "$departTime"
      }
    },
    {
      "ruleType": "equals",
      "valueA": "$[Data].travelDirection",
      "valueB": "TowardsFacility",
      "destination": "timeOfDay",
      "effectParams": {
        "label": "$arriveTime"
      }
    },
    {
      "ruleType": "equals",
      "valueA": "$[Data].overlapPolicy",
      "valueB": "Split",
      "destination": "showHoles",
      "effectParams": {
        "visible": false
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Minutes') AND ($[Data].travelMode.impedanceAttributeName NOT 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 300
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND ((($[Data].breakUnits = 'Minutes') AND ($[Data].travelMode.impedanceAttributeName NOT 'WalkTime')) AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 15
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Hours') AND ($[Data].travelMode.impedanceAttributeName NOT 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 5
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND ((($[Data].breakUnits = 'Hours') AND ($[Data].travelMode.impedanceAttributeName NOT 'WalkTime')) AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 0.25
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Seconds') AND ($[Data].travelMode.impedanceAttributeName NOT 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 18000
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND ((($[Data].breakUnits = 'Seconds') AND ($[Data].travelMode.impedanceAttributeName NOT 'WalkTime')) AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 900
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Minutes') AND ($[Data].travelMode.impedanceAttributeName = 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 540
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND ((($[Data].breakUnits = 'Minutes') AND ($[Data].travelMode.impedanceAttributeName = 'WalkTime')) AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 300
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Hours') AND ($[Data].travelMode.impedanceAttributeName = 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 9
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND ((($[Data].breakUnits = 'Hours') AND ($[Data].travelMode.impedanceAttributeName = 'WalkTime')) AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 5
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Seconds') AND ($[Data].travelMode.impedanceAttributeName = 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 32400
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND ((($[Data].breakUnits = 'Seconds') AND ($[Data].travelMode.impedanceAttributeName = 'WalkTime')) AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 18000
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Miles') AND ($[Data].travelMode.timeAttributeName NOT 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 300
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Miles') AND ($[Data].travelMode.timeAttributeName = 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 27
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Miles') AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 15
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Kilometers') AND ($[Data].travelMode.timeAttributeName NOT 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 482.803
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Kilometers') AND ($[Data].travelMode.timeAttributeName = 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 43.452
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Kilometers') AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 24.14
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Meters') AND ($[Data].travelMode.timeAttributeName NOT 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 482803.2
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Meters') AND ($[Data].travelMode.timeAttributeName = 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 43452.288
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Meters') AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 24140.16
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Feet') AND ($[Data].travelMode.timeAttributeName NOT 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 1584000
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Feet') AND ($[Data].travelMode.timeAttributeName = 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 142560
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Feet') AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 79200
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Yards') AND ($[Data].travelMode.timeAttributeName NOT 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 528000
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Yards') AND ($[Data].travelMode.timeAttributeName = 'WalkTime') AND ($[Data].showHoles = false) AND ($[Data].includeReachableStreets = false)))",
      "destination": "breakValues",
      "effectParams": {
        "max": 47520
      }
    },
    {
      "ruleType": "expression",
      "expression": "(($[Component].inputLayer.user.portal.isPortal = false) AND (($[Data].breakUnits = 'Yards') AND (($[Data].showHoles = true) OR ($[Data].includeReachableStreets = true))))",
      "destination": "breakValues",
      "effectParams": {
        "max": 26400
      }
    },
    {
      "ruleType": "equals",
      "valueA": "$[Data].travelMode.id",
      "valueB": null,
      "destination": "travelMode",
      "effectParams": {
        "validationParams": {
          "message": "$travelModeRequiredMessage"
        }
      }
    }
  ],
  "UIparameters": [
    {
      "label": "$inputLayersGroupLabel",
      "componentName": "analysis-block",
      "summaryText": "$inputLayersSummaryText",
      "UIparameters": [
        {
          "name": "inputLayer",
          "label": "$inputLayerGroupLabel",
          "componentName": "analysis-layer-input",
          "layerFilterType": ["feature_point"],
          "required": true,
          "minimumFeatureCount": 1
        },
        {
          "label": "$barrierSectionLabel",
          "componentName": "analysis-section",
          "UIparameters": [
            {
              "name": "pointBarrierLayer",
              "label": "$pointBarrierLayerLabel",
              "componentName": "analysis-layer-input",
              "layerFilterType": ["feature_point"]
            },
            {
              "name": "lineBarrierLayer",
              "label": "$lineBarrierLayerLabel",
              "componentName": "analysis-layer-input",
              "layerFilterType": ["feature_line"]
            },
            {
              "name": "polygonBarrierLayer",
              "label": "$polygonBarrierLayerLabel",
              "componentName": "analysis-layer-input",
              "layerFilterType": ["feature_polygon"]
            }
          ]
        }
      ]
    },
    {
      "label": "$inputAnalysisSettingGroupLabel",
      "layout": "vertical",
      "componentName": "analysis-block",
      "UIparameters": [
        {
          "label": "$travelModeLabel",
          "name": "travelMode",
          "required": true,
          "value": ""
        },
        {
          "layout": "vertical",
          "UIparameters": [
            {
              "name": "breakValues",
              "label": "$breakValuesLabel",
              "defaultValue": [],
              "required": true
            },
            {
              "name": "breakUnits",
              "label": "$breakUnitsLabel",
              "required": true,
              "defaultValue": "Minutes",
              "useDefaultOnReset": true
            }
          ]
        },
        {
          "name": "timeZoneForTimeOfDay",
          "label": "$timeZoneForTimeOfDay",
          "visible": false
        },
        {
          "name": "travelDirection",
          "label": "$travelDirectionLabel",
          "choiceListIcons": { "AwayFromFacility": "expand", "TowardsFacility": "contract" },
          "choiceListLabels": { "AwayFromFacility": "$awayFromFacility", "TowardsFacility": "$towardsFacility" },
          "required": true
        },
        {
          "label": "$departTime",
          "name": "timeOfDay",
          "componentName": "analysis-traffic-time-input",
          "required": true
        },
        {
          "name": "overlapPolicy",
          "label": "$overlapPolicyLabel",
          "choiceListIcons": {
            "Overlap": "overlap-features",
            "Dissolve": "dissolve-features",
            "Split": "split-features"
          },
          "choiceListLabels": {
            "Overlap": "$overlap",
            "Dissolve": "$dissolve",
            "Split": "$split"
          },
          "required": true
        },
        {
          "name": "showHoles",
          "label": "$showHolesLabel"
        }
      ]
    },
    {
      "label": "$resultLayersGroupLabel",
      "componentName": "analysis-block",
      "summaryText": "$resultLayerGroupText",
      "UIparameters": [
        {
          "name": "outputName",
          "label": "$outputName",
          "placeholderText": "$outputNamePlaceholderText",
          "componentName": "analysis-string-input",
          "required": true
        },
        {
          "name": "includeReachableStreets",
          "label": "$includeReachableStreetsLabel"
        },
        {
          "name": "saveResultIn",
          "label": "$saveResultIn",
          "componentName": "analysis-folder-input"
        }
      ]
    }
  ]
}
